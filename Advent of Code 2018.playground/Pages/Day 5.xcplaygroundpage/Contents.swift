import Foundation

extension Character {
    var isLowercase: Bool {
        guard let scalar = self.unicodeScalars.first else { return false }
        return CharacterSet.lowercaseLetters.contains(scalar)
    }
    
    var isUppercase: Bool {
        guard let scalar = self.unicodeScalars.first else { return false }
        return CharacterSet.uppercaseLetters.contains(scalar)
    }
    
    var uppercase: Character {
        let stringSelf = String(self)
        let uppercase = stringSelf.uppercased()
        return uppercase.first!
    }
    
    var lowercase: Character {
        let stringSelf = String(self)
        let lowercase = stringSelf.lowercased()
        return lowercase.first!
    }
}

/*
 // Seems to all work
"abcdefghijklmnopqrstuvwxyz".forEach { print($0.isLowercase) }
"abcdefghijklmnopqrstuvwxyz".forEach { print($0.isUppercase) }
"ABCDEFGHIJKLMNOPQRSTUVWXYZ".forEach { print($0.isLowercase) }
"ABCDEFGHIJKLMNOPQRSTUVWXYZ".forEach { print($0.isUppercase) }
*/

extension String {
    var containsReactiveUnits: Bool {
        for (characterIndex, character) in self.enumerated() {
            guard characterIndex < count - 1 else { continue }
            let stringCharacter = String(character)
            let lowerCaseCharacter = stringCharacter.lowercased()
            let nextCharacter = self[index(startIndex, offsetBy: characterIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() {
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        return true
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        return true
                    }
                }
            }

        }
        return false
    }
    
    /*
     This returns a string if the self string contains a reactive pair.
     It does nothing else and therefore leads to an intensive brute force approach.
    */
    var withoutReactiveUnitsSingleStep: String? {
        for (characterIndex, character) in self.enumerated() {
            guard characterIndex < count - 1 else { continue }
            let stringCharacter = String(character)
            let lowerCaseCharacter = stringCharacter.lowercased()
            let nextCharacter = self[index(startIndex, offsetBy: characterIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() {
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: characterIndex)...index(startIndex, offsetBy: characterIndex + 1))
                        return copy
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: characterIndex)...index(startIndex, offsetBy: characterIndex + 1))
                        return copy
                    }
                }
            }
            
        }
        return nil
    }
    
    /*
     This was an attempt to be smarter and return a pair of strings if a reactive pair was found.
     One string would be processed and not contain any reactive pairs of characters, and the other string would still require processing.
     Unfortunately this still does not handle cases when letters are brought together when removing reactive pairs of characters.
    */
    var splitWithoutReactiveUnitsStep: (processed: String, stillToProcess: String)? {
        for (characterIndex, character) in self.enumerated() {
            guard characterIndex < count - 1 else { continue } // Skip if last character
            let stringCharacter = String(character)
            let lowerCaseCharacter = stringCharacter.lowercased()
            let nextCharacter = self[index(startIndex, offsetBy: characterIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() { // If it's the same character
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        var complete = self
                        var toDo = self
                        
                        complete.removeSubrange(index(startIndex, offsetBy: characterIndex - 1)..<index(endIndex, offsetBy: 0))
                        toDo.removeSubrange(index(startIndex, offsetBy: 0)...index(startIndex, offsetBy: characterIndex + 1))
                        
                        return (complete, toDo)
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        var complete = self
                        var toDo = self
                        
                        complete.removeSubrange(index(startIndex, offsetBy: characterIndex)..<index(endIndex, offsetBy: 0))
                        toDo.removeSubrange(index(startIndex, offsetBy: 0)...index(startIndex, offsetBy: characterIndex + 1))
                        
                        if let lastCharacterOfComplete = complete.last {
                            complete = String(complete.dropLast())
                            toDo = String(lastCharacterOfComplete) + toDo
                        }
                        
                        return (complete, toDo)
                    }
                }
            }
        }
        
        return nil
    }
    
    /*
     This will loop through the string, remove the first reactive pair it finds, and then report where this reactive pair was found, therefore allowing later code to resume at this point and not need to loop back to the beginning and examine characters which are known to be OK.
    */
    func withoutFirstReactiveUnitsAfter(offsetIndex: Int = 0) -> (processedString: String, index: Int)? {
        var varIndex = offsetIndex
        
        while varIndex < count - 1 {
            let character           = self[index(startIndex, offsetBy: varIndex)]
            let stringCharacter     = String(character)
            let lowerCaseCharacter  = stringCharacter.lowercased()
            let nextCharacter       = self[index(startIndex, offsetBy: varIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() { // If it's the same character
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: varIndex)...index(startIndex, offsetBy: varIndex + 1))
                        return (copy, max(0, varIndex - 1))
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: varIndex)...index(startIndex, offsetBy: varIndex + 1))
                        return (copy, max(0, varIndex - 1))
                    }
                }
            }
            
            varIndex += 1
        }
        
        return nil
    }
    
    var withoutReactiveUnits: String {
        var copy = self
        
        while let withoutReactiveUnitsSingleStep = copy.withoutReactiveUnitsSingleStep {
            copy = withoutReactiveUnitsSingleStep
//            print(withoutReactiveUnitsSingleStep)
        }
        
        return copy
    }
    
    var withoutReactiveUnits2: String {
        var copy = self
        var startingIndex = 0
        
        while let (withoutFirstReactiveUnits, nextStartingIndex) = copy.withoutFirstReactiveUnitsAfter(offsetIndex: startingIndex) {
            copy = withoutFirstReactiveUnits
            startingIndex = nextStartingIndex
        }
        
        return copy
    }
    
    var possibleCharacters: [Character] {
        var charactersToReturn: [Character] = []
        
        for character in self {
            if charactersToReturn.contains(character) == false {
                charactersToReturn.append(character)
            }
        }
        
        return charactersToReturn
    }
    
    var setPossibleCharacters: Set<Character> {
        return Set(self)
    }
    
    var possibleCharactersLowercaseOnly: [Character] {
        var charactersToReturn: [Character] = []
        
        for character in self {
            let lowercase = character.lowercase
            
            if charactersToReturn.contains(lowercase) == false {
                charactersToReturn.append(lowercase)
            }
        }
        
        return charactersToReturn
    }
    
    var stringsWithoutCharacterOptions: [String] {
        return self.possibleCharactersLowercaseOnly.map { mapCharacter -> String in
            return self.filter { filterCharacter -> Bool in
                return (filterCharacter.uppercase == mapCharacter || filterCharacter.lowercase == mapCharacter) == false
            }
        }
    }
    
    var reactedStringsWithoutCharacterOptions: [String] {
        return stringsWithoutCharacterOptions.map {
            return $0.withoutReactiveUnits2
        }
    }
    
}

let testInput = "dabAcCaCBAcCcaDA"

func tests() {
    
    // part 1
    testInput.containsReactiveUnits
    
    testInput.withoutReactiveUnitsSingleStep
    
    testInput.withoutReactiveUnits
    
    // part 1 attempt 2
    //testInput.splitWithoutReactiveUnitsStep
    testInput.withoutFirstReactiveUnitsAfter()
    testInput.withoutReactiveUnits2
    
    // part 2
    testInput.possibleCharacters
    testInput.setPossibleCharacters
    testInput.possibleCharactersLowercaseOnly
    testInput.stringsWithoutCharacterOptions
    testInput.reactedStringsWithoutCharacterOptions
}

// tests()

let input = """

"""

func part1() -> Int {
    let inputWithoutReactiveUnits = input.withoutReactiveUnits
    return inputWithoutReactiveUnits.count
}

//print(part1())

func part1_2() -> Int {
    let inputWithoutReactiveUnits = input.withoutReactiveUnits2
    return inputWithoutReactiveUnits.count // Returns 9704 (correct!)
}

//print(part1_2())

func part2() -> Int {
    let options = input.reactedStringsWithoutCharacterOptions
    
    let sortedOptions = options.sorted {
        $0.count < $1.count
    }
    
    return sortedOptions[0].count
}

print(part2())
