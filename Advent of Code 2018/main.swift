//
//  main.swift
//  Advent of Code 2018
//
//  Created by James Coleman on 18/12/2018.
//  Copyright Â© 2018 James Coleman. All rights reserved.
//

import Foundation

print("Hello, World!")

let before = Date()

let day2input = """
-6
-1
-18
-10
+5
+18
+19
+11
-6
+13
+16
-15
+8
-10
+9
+12
+1
-9
-6
+16
+6
+13
+5
+18
-15
-1
+14
-2
+6
+12
-7
+5
-19
+2
+16
-5
-3
+6
+8
+18
-3
+9
+14
-10
+9
-5
+4
-1
+11
+10
+15
+12
-16
-12
+17
-2
-16
-11
+15
-11
+12
+14
-5
+10
-12
-6
+21
+19
-12
-6
+9
-4
-18
+15
+10
+3
+12
-17
-6
-11
+5
+10
+15
+9
-19
+3
+15
+2
+13
+15
-13
+7
+5
+19
+10
+14
+10
+9
+1
+13
+4
-5
+17
-14
+3
-8
-3
-3
-13
+6
-3
-11
-7
+17
+9
+4
-14
-19
-15
+7
-14
+19
-3
+11
+9
+16
+17
-6
+12
+12
+14
-7
+18
+8
+7
+7
-10
+5
+11
+15
+10
-2
-2
-5
-12
-7
+4
+10
+19
+11
-19
-10
-16
+11
-19
-2
-20
-10
+15
+8
-2
-12
+17
-14
-17
-18
-2
+1
+16
-12
-19
-13
-18
-3
+15
+9
+18
+16
+8
-9
-22
-4
+20
-6
+14
+1
+7
+10
+7
-4
+11
+11
-16
-5
+9
+22
+10
+12
-9
-17
+15
-8
+4
-3
-6
-3
+2
+11
+7
+9
+13
+11
-14
+11
-2
-2
-9
-1
-17
+15
+4
-14
+4
+16
+20
-4
+18
+8
-11
-18
+4
+19
-18
-15
-4
+9
+21
-8
+5
+6
+3
+6
-11
+14
+11
+4
-7
+18
+3
-2
-6
+9
-16
+3
+2
-9
+2
+6
-12
-11
-6
-9
+19
-18
+3
-9
-18
+10
+11
-7
-1
-9
-19
+26
+26
+10
+21
+18
+2
-6
+9
+8
-3
-12
+6
+10
-17
-5
-15
-7
-6
-14
+9
+7
+13
+10
+6
+17
+13
+1
+17
+10
+2
+2
+20
-5
+2
+11
-18
+9
-18
-13
+14
-5
+17
-6
-15
+20
+5
+3
-12
+16
-13
+11
+15
+8
-12
+14
+7
-19
-9
+3
+5
+4
+21
-3
+6
+11
-8
-14
+15
-5
+15
-6
+19
+4
-16
+3
+23
-9
-9
-18
+8
+7
-8
+12
-18
-4
+19
+9
+5
+8
+19
+13
+22
+14
-9
+18
+6
-8
-1
+16
-9
+13
+17
+9
-13
+10
-19
-9
-10
+20
+13
+6
+4
-14
+2
-19
-13
+18
+6
-18
-19
-1
-7
+12
+11
-14
-19
+4
-8
+19
-1
-27
+3
-14
-2
-10
-14
+2
+16
-7
+14
-15
-4
-1
-11
-12
+6
-2
-17
-2
+42
+4
-1
+51
+22
+11
+4
+12
-3
+10
+7
+19
-16
+23
+15
-16
-3
-20
-10
+19
+4
-35
+2
-18
-2
-9
-6
+34
-12
+43
-8
+5
-19
+18
+16
+4
+23
+10
+14
+14
-13
+25
-11
-4
-2
-1
-6
+29
-36
+23
+14
-19
-20
-32
-35
-89
-97
-22
-16
+10
-26
-9
-14
-18
+11
+17
-2
-11
+14
+16
-22
+7
-8
-10
+2
-1
+25
-21
+8
+11
-5
-43
-13
+10
-18
+15
+11
+17
-15
+6
+4
+19
+34
-106
+2
-20
+22
-9
-30
+13
-26
-53
+5
-2
+32
+206
-15
+7
+18
+22
-36
+43
+46
-190
+314
+76479
+13
-19
-3
+13
+4
+16
+9
+7
+10
-13
+6
-15
-17
+10
+17
-7
-11
-11
+7
+16
-18
-18
-20
-14
+12
+18
+20
+15
-17
-4
-1
+20
+17
-19
-8
-14
-14
+1
-7
+18
+23
-4
-1
+31
+18
-11
-2
-4
+15
-12
+10
+14
-2
+13
+6
+5
+8
+16
+18
+19
-18
-2
+16
+16
+8
+10
-6
-13
+10
+8
-14
-17
-13
-8
+7
-16
+4
+18
+1
-13
+15
-1
-5
-4
-16
-17
+7
-9
+18
-15
-19
+6
-11
-9
+18
+8
-19
-6
+4
-15
-9
-11
-3
-8
-6
+5
+10
+18
+17
-15
+8
-5
+4
+7
+11
-20
-1
+2
-12
+1
-3
-6
+10
+27
+4
+19
+7
+6
-3
+2
+10
+2
-3
-20
-16
+19
+14
+18
+15
+4
+6
-16
-11
-7
-18
-7
+4
-17
+2
+3
-16
+10
-16
-2
-6
+29
+15
-25
+7
+13
+16
-2
+25
+7
+4
+17
-20
+17
+6
-7
-4
+9
+14
-6
+11
-8
+11
-5
+6
+2
+3
+8
-12
+15
-9
-3
+6
+11
-6
+10
+10
-13
+7
+11
+2
-15
+14
+11
+3
+10
-18
-17
+15
+14
-13
+10
+1
+7
-15
-10
-13
-9
+7
-15
-1
+6
-21
+19
+16
+10
+13
+15
-3
-13
+8
+19
+1
+19
-7
+4
-1
+3
-1
-14
+7
-1
+12
+3
-1
+12
+17
+8
-11
-16
+17
+11
-14
-19
+15
+20
+2
-17
-7
-11
+12
-8
+3
+18
-9
-1
+11
+15
+6
+8
+4
-10
+8
-19
+7
-11
-10
-18
+2
+13
+16
-5
-4
+8
+7
+7
-11
+5
+19
+19
+19
-8
+14
-11
-9
-12
+11
+12
+18
+1
+3
+18
+17
-16
+8
+7
-10
+1
+11
+1
+5
+7
+4
+3
-13
+14
-16
+17
+7
+9
+1
-7
-13
+17
+11
-19
+7
-19
-13
-6
-16
-13
+1
+5
+18
-17
-12
-10
+2
+15
-4
-12
-13
+5
+10
+15
+14
+9
-10
-8
+2
+15
+9
+2
+4
-13
-16
+1
+6
+4
-17
-21
-20
+4
+8
-11
+17
-3
+12
-10
+13
-14
-19
+10
-19
+4
-1
+11
+4
+20
-1
+8
+22
+9
-19
-5
-5
+42
+15
+16
-7
-15
+9
+10
+4
+14
+9
-16
-14
+8
+7
+9
+4
+5
-15
-1
+2
+1
-8
-20
-12
+1
-4
+1
+13
+5
+14
-21
+36
+12
+1
+26
+12
+5
+10
-2
-20
-8
-19
-10
+42
-20
+150
+6
+11
+9
+2
+5
-11
+20
-8
-27
-11
-17
+6
+31
+2
+7
+22
+12
+13
+25
-7
-11
+19
-9
+18
+1
+7
+6
+15
+7
+11
-9
-17
-10
-6
+10
+3
-19
+14
+19
-12
-18
+2
+5
-13
-19
-11
-19
+1
+12
-11
-77534
"""

func day2part2_2() -> Int {
    let inputArray = day2input.split(separator: "\n")
    
    let inputInts = inputArray.compactMap { Int($0) }
    
    let inputCount = inputInts.count
    
    var cumulative = 0
    
    var cumulativeArray: [Int] = [cumulative]
    
    var index = 0
    
    var hasLooped = false
    
    while true {
        
        let trueIndex = index % inputCount
        
        let int = inputInts[trueIndex]
        
        cumulative += int
        
        if hasLooped == false {
            cumulativeArray.append(cumulative)
            if index >= inputCount {
                hasLooped = true
            }
        } else if cumulativeArray.contains(cumulative) {
            return cumulative
        } else {
            cumulativeArray.append(cumulative)
        }
        
        index += 1
    }
}

/*
let start = Date()

print(day2part2_2()) // 77809 Too high. 77271 (correct)

print("Took", Date().timeIntervalSince(start), "seconds")
*/

// MARK: - Day 3 Part 2

enum Day3Error: Swift.Error {
    case couldNotObtainId
    case couldNotObtainXOffset
    case couldNotObtainYOffset
    case couldNotObtainWidth
    case couldNotObtainHeight
    case wrongSplitCount(Int)
    case wrongOffsetCount(Int)
    case wrongGridCount(Int)
    case notOnly1NonOverlappingGrid(Int)
}

struct Grid {
    let id: Int
    
    let xOffset: Int
    let yOffset: Int
    
    let width: Int
    let height: Int
    
    var totalWidth: Int {
        return xOffset + width + 1
    }
    var totalHeight: Int {
        return yOffset + height + 1
    }
    
    var overlapping = false
    
    init(instructions: String) throws {
        let split = instructions.split(separator: " ")
        
        guard split.count == 4 else { throw Day3Error.wrongSplitCount(split.count) }
        
        let idString = split[0]
        guard let idInt = Int(idString.dropFirst()) else { throw Day3Error.couldNotObtainId }
        
        let combinedOffset = split[2]
        let offsets = combinedOffset.split { (character) -> Bool in
            return character == "," || character == ":"
        }
        
        guard offsets.count == 2 else { throw Day3Error.wrongOffsetCount(offsets.count) }
        
        let combinedGrid = split[3]
        let grid = combinedGrid.split(separator: "x")
        
        guard grid.count == 2 else { throw Day3Error.wrongGridCount(grid.count) }
        
        guard let xOffset = Int(offsets[0]) else { throw Day3Error.couldNotObtainXOffset }
        guard let yOffset = Int(offsets[1]) else { throw Day3Error.couldNotObtainYOffset }
        
        guard let width = Int(grid[0]) else { throw Day3Error.couldNotObtainWidth }
        guard let height = Int(grid[1]) else { throw Day3Error.couldNotObtainWidth }
        
        self.id = idInt
        
        self.xOffset = xOffset
        self.yOffset = yOffset
        
        self.width = width
        self.height = height
    }
    
    var boolArrays: [[Bool]] {
        return [Int](1...totalHeight).map { row in
            return [Int](1...totalWidth).map { column in
                if
                    row > yOffset,
                    row <= yOffset + height,
                    column > xOffset,
                    column <= xOffset + width {
                    return true
                } else {
                    return false
                }
            }
        }
    }
    
    var visualArrays: [[String]] {
        return boolArrays.map { row in
            return row.map { selected in
                return selected ? "#" : "."
            }
        }
    }
    
    var visualDescription: String {
        return visualArrays.reduce("", { (stringSoFar, stringArray) -> String in
            return stringSoFar + stringArray.joined() + "\n"
        })
    }
    
    func areaArrays(masterWidth: Int) -> [[Int]] {
        let firstRow = [Int](xOffset..<xOffset + width)
        let columnSeed = [Int](yOffset..<yOffset + height)
        let rows = columnSeed.enumerated().map { offsetY, elementY -> [Int] in
            let heightOffset = (yOffset * masterWidth) + (offsetY * masterWidth)
            return firstRow.enumerated().map { offsetX, elementX -> Int in
                return elementX + heightOffset
            }
        }
        return rows
    }
    
    func areaArray(masterWidth: Int) -> [Int] {
        return areaArrays(masterWidth: masterWidth).reduce([], +)
    }
    
    func areaSet(masterWidth: Int) -> Set<Int> {
        return Set(areaArray(masterWidth: masterWidth))
    }
    
    static func overlappingVisual(grids: [Grid]) -> String {
        let gridsByTotalWidth = grids.sorted { (grid1, grid2) -> Bool in
            return grid1.totalWidth > grid2.totalWidth
        }
        
        let gridsByTotalHeight = grids.sorted { (grid1, grid2) -> Bool in
            return grid1.totalHeight > grid2.totalHeight
        }
        
        guard
            let widestGrid = gridsByTotalWidth.first,
            let highestGrid = gridsByTotalHeight.first
            else { return "No grids" }
        
        //        print("Width: \(widestGrid.totalWidth), height: \(highestGrid.totalHeight)")
        
        let seedArray = [Bool?](repeating: nil, count: widestGrid.totalWidth)
        
        var seedGrid = [[Bool?]](repeating: seedArray, count: highestGrid.totalHeight)
        
        for grid in grids {
            //            print(grid)
            //            print(grid.id)
            for row in grid.yOffset + 1...grid.yOffset + grid.height {
                for column in grid.xOffset + 1...grid.xOffset + grid.width {
                    //                    print(row - 1, column - 1)
                    if
                        row <= grid.yOffset + grid.height,
                        column <= grid.xOffset + grid.width {
                        if seedGrid[row - 1][column - 1] != nil {
                            //                            print("Should be true")
                            seedGrid[row - 1][column - 1] = true
                        } else {
                            //                            print("Should be false")
                            seedGrid[row - 1][column - 1] = false
                        }
                    } else {
                        print("wrong if statement -------------")
                    }
                }
            }
        }
        
        let visualArray = seedGrid.map { row in
            return row.map { overlapping -> String in
                if let overlapping = overlapping {
                    return overlapping ? "X" : "#"
                } else {
                    return "."
                }
            }
        }
        
        let visualDescription = visualArray.reduce("", { (stringSoFar, stringArray) -> String in
            return stringSoFar + stringArray.joined() + "\n"
        })
        
        return visualDescription
    }
    
    static func overlapping(grids: [Grid]) -> [Grid] {
        let gridsByTotalWidth = grids.sorted { (grid1, grid2) -> Bool in
            return grid1.totalWidth > grid2.totalWidth
        }
        
        let gridsByTotalHeight = grids.sorted { (grid1, grid2) -> Bool in
            return grid1.totalHeight > grid2.totalHeight
        }
        
        guard
            let widestGrid = gridsByTotalWidth.first,
            let highestGrid = gridsByTotalHeight.first
            else { return [] }
        
        //        print("Width: \(widestGrid.totalWidth), height: \(highestGrid.totalHeight)")
        
        let seedArray = [Bool?](repeating: nil, count: widestGrid.totalWidth)
        
        var seedGrid = [[Bool?]](repeating: seedArray, count: highestGrid.totalHeight)
        
        var gridsToReturn: [Grid] = []
        
        for grid in grids {
            //            print(grid)
            //            print(grid.id)
            var gridCopy = grid
            for row in grid.yOffset + 1...grid.yOffset + grid.height {
                for column in grid.xOffset + 1...grid.xOffset + grid.width {
                    //                    print(row - 1, column - 1)
                    if
                        row <= grid.yOffset + grid.height,
                        column <= grid.xOffset + grid.width {
                        if seedGrid[row - 1][column - 1] != nil {
                            //                            print("Should be true")
                            seedGrid[row - 1][column - 1] = true
                            gridCopy.overlapping = true
                        } else {
                            //                            print("Should be false")
                            seedGrid[row - 1][column - 1] = false
                        }
                    } else {
                        print("wrong if statement -------------")
                    }
                }
            }
            gridsToReturn += [gridCopy]
        }
        
        return gridsToReturn
    }
    
    static func withOverlap(grids: [Grid]) -> [Grid] {
        var gridsToReturn = grids
        
        let gridsByTotalWidth = grids.sorted { (grid1, grid2) -> Bool in
            return grid1.totalWidth > grid2.totalWidth
        }
        
        guard
            let widestGrid = gridsByTotalWidth.first
            else { return [] }
        
        let masterWidth = widestGrid.totalWidth
        
        var gridSets = [Int: Set<Int>]()
        
        for (index, grid) in gridsToReturn.enumerated() {
            var secondIndex = index + 1
            
            var gridSet: Set<Int> {
                if let set = gridSets[index] {
                    return set
                } else {
                    let set = grid.areaSet(masterWidth: masterWidth)
                    gridSets[index] = set
                    return set
                }
            }
            
            while secondIndex < gridsToReturn.count {
                let secondGrid = gridsToReturn[secondIndex]
                
                var secondGridSet: Set<Int> {
                    if let set = gridSets[secondIndex] {
                        return set
                    } else {
                        let set = secondGrid.areaSet(masterWidth: masterWidth)
                        gridSets[secondIndex] = set
                        return set
                    }
                }
                
                let intersection = gridSet.intersection(secondGridSet)
                
                if intersection.count != 0 {
                    /*
                    if index == 0 {
                        print("\(grid) intersects with \(secondGrid) at cells:\n\(intersection)")
                    }
                    */
                    gridsToReturn[index].overlapping = true
                    gridsToReturn[secondIndex].overlapping = true
                }
                
                secondIndex += 1
            }
        }
        
        return gridsToReturn
    }
}

extension Grid: CustomStringConvertible {
    var description: String {
        return """
        Grid: #\(id) @ \(xOffset),\(yOffset): \(width)x\(height)
        """
    }
}

let day3Input = """
#1 @ 249,597: 20x15
#2 @ 192,174: 10x21
#3 @ 734,527: 23x10
#4 @ 165,232: 27x27
#5 @ 834,22: 17x12
#6 @ 558,963: 18x26
#7 @ 88,870: 13x10
#8 @ 877,380: 20x13
#9 @ 431,810: 12x22
#10 @ 359,82: 26x23
#11 @ 466,394: 24x26
#12 @ 90,393: 24x17
#13 @ 166,192: 14x17
#14 @ 939,687: 11x27
#15 @ 491,18: 11x18
#16 @ 124,106: 16x22
#17 @ 595,627: 17x20
#18 @ 596,781: 27x28
#19 @ 458,527: 24x10
#20 @ 615,401: 11x8
#21 @ 724,287: 15x24
#22 @ 274,692: 18x14
#23 @ 557,102: 28x13
#24 @ 797,403: 29x10
#25 @ 473,655: 12x29
#26 @ 300,959: 19x24
#27 @ 416,724: 26x29
#28 @ 684,176: 28x19
#29 @ 296,109: 10x14
#30 @ 148,191: 19x24
#31 @ 878,716: 10x29
#32 @ 951,234: 25x29
#33 @ 111,385: 13x22
#34 @ 224,716: 11x16
#35 @ 919,236: 20x15
#36 @ 202,499: 15x11
#37 @ 790,13: 11x24
#38 @ 229,891: 12x19
#39 @ 717,434: 17x26
#40 @ 294,642: 10x15
#41 @ 427,693: 18x21
#42 @ 125,763: 13x18
#43 @ 122,217: 14x14
#44 @ 274,253: 27x25
#45 @ 613,19: 21x23
#46 @ 57,45: 14x12
#47 @ 324,512: 28x19
#48 @ 966,949: 24x18
#49 @ 214,149: 17x15
#50 @ 261,636: 22x10
#51 @ 882,809: 28x27
#52 @ 610,801: 16x11
#53 @ 830,568: 12x3
#54 @ 228,904: 16x11
#55 @ 798,573: 17x22
#56 @ 338,652: 27x13
#57 @ 71,514: 28x20
#58 @ 302,337: 16x11
#59 @ 619,348: 11x10
#60 @ 198,655: 13x18
#61 @ 565,857: 29x27
#62 @ 758,353: 15x16
#63 @ 923,531: 19x15
#64 @ 475,180: 17x20
#65 @ 418,943: 25x16
#66 @ 304,194: 10x21
#67 @ 213,505: 24x13
#68 @ 240,345: 19x29
#69 @ 261,356: 18x21
#70 @ 304,572: 12x18
#71 @ 234,57: 12x19
#72 @ 896,417: 14x23
#73 @ 218,940: 19x26
#74 @ 610,129: 13x22
#75 @ 836,802: 23x15
#76 @ 781,268: 26x28
#77 @ 183,230: 23x27
#78 @ 213,223: 18x3
#79 @ 591,931: 16x21
#80 @ 940,333: 12x25
#81 @ 205,618: 26x13
#82 @ 173,277: 15x19
#83 @ 259,601: 22x13
#84 @ 10,581: 26x12
#85 @ 229,161: 13x11
#86 @ 321,581: 11x17
#87 @ 111,508: 18x23
#88 @ 191,572: 17x12
#89 @ 134,796: 22x12
#90 @ 977,643: 3x5
#91 @ 387,574: 27x24
#92 @ 634,152: 21x18
#93 @ 69,265: 15x25
#94 @ 111,386: 10x29
#95 @ 239,943: 29x13
#96 @ 604,606: 24x24
#97 @ 33,419: 23x29
#98 @ 752,736: 26x12
#99 @ 646,46: 11x21
#100 @ 140,61: 20x18
#101 @ 960,105: 21x28
#102 @ 933,885: 13x21
#103 @ 53,51: 13x21
#104 @ 776,5: 15x17
#105 @ 440,907: 28x19
#106 @ 268,315: 17x17
#107 @ 150,176: 18x22
#108 @ 555,336: 13x29
#109 @ 552,307: 29x22
#110 @ 193,190: 18x27
#111 @ 531,33: 22x28
#112 @ 786,516: 26x19
#113 @ 61,480: 22x24
#114 @ 117,675: 28x16
#115 @ 5,151: 10x18
#116 @ 700,74: 10x25
#117 @ 315,641: 24x16
#118 @ 273,805: 12x25
#119 @ 924,526: 24x12
#120 @ 58,79: 29x21
#121 @ 624,191: 20x23
#122 @ 180,432: 26x27
#123 @ 275,205: 16x21
#124 @ 726,980: 11x16
#125 @ 154,198: 14x23
#126 @ 152,192: 15x15
#127 @ 820,541: 17x26
#128 @ 896,173: 28x29
#129 @ 769,608: 25x13
#130 @ 736,263: 22x13
#131 @ 521,597: 16x12
#132 @ 121,477: 15x18
#133 @ 143,34: 15x12
#134 @ 208,715: 16x18
#135 @ 557,521: 23x14
#136 @ 274,814: 27x11
#137 @ 154,542: 14x19
#138 @ 588,902: 28x15
#139 @ 322,351: 28x25
#140 @ 156,799: 27x28
#141 @ 635,324: 21x22
#142 @ 488,564: 13x25
#143 @ 763,882: 27x16
#144 @ 9,718: 16x22
#145 @ 145,772: 14x22
#146 @ 108,396: 15x24
#147 @ 417,826: 15x16
#148 @ 366,36: 15x13
#149 @ 106,961: 19x22
#150 @ 810,224: 18x28
#151 @ 30,456: 12x22
#152 @ 974,636: 12x21
#153 @ 114,104: 14x12
#154 @ 114,183: 29x23
#155 @ 514,13: 18x14
#156 @ 64,571: 11x25
#157 @ 774,276: 15x19
#158 @ 950,229: 28x29
#159 @ 722,154: 20x20
#160 @ 30,575: 16x24
#161 @ 802,607: 28x23
#162 @ 425,944: 23x11
#163 @ 226,945: 25x20
#164 @ 218,194: 12x12
#165 @ 880,386: 5x9
#166 @ 46,593: 14x10
#167 @ 550,746: 13x20
#168 @ 592,328: 22x22
#169 @ 131,608: 29x21
#170 @ 371,248: 22x24
#171 @ 159,177: 23x23
#172 @ 274,409: 16x23
#173 @ 301,577: 11x15
#174 @ 130,167: 16x20
#175 @ 301,814: 18x11
#176 @ 893,413: 24x15
#177 @ 266,316: 23x17
#178 @ 860,491: 24x29
#179 @ 708,737: 24x20
#180 @ 625,250: 16x25
#181 @ 902,420: 27x25
#182 @ 152,76: 14x19
#183 @ 492,166: 8x14
#184 @ 182,367: 17x21
#185 @ 226,605: 28x16
#186 @ 544,365: 20x27
#187 @ 69,672: 24x26
#188 @ 354,775: 29x15
#189 @ 821,715: 10x27
#190 @ 763,436: 27x18
#191 @ 259,273: 9x11
#192 @ 562,554: 19x27
#193 @ 571,770: 14x23
#194 @ 593,81: 11x5
#195 @ 59,187: 16x15
#196 @ 235,69: 18x23
#197 @ 381,34: 11x23
#198 @ 58,621: 25x15
#199 @ 812,985: 25x10
#200 @ 146,657: 18x24
#201 @ 144,132: 25x22
#202 @ 570,791: 12x15
#203 @ 663,490: 24x12
#204 @ 642,180: 16x22
#205 @ 124,293: 12x27
#206 @ 815,137: 28x18
#207 @ 16,880: 27x28
#208 @ 230,365: 28x22
#209 @ 230,782: 14x13
#210 @ 969,108: 5x15
#211 @ 862,726: 23x27
#212 @ 858,135: 23x10
#213 @ 853,588: 12x24
#214 @ 430,311: 26x16
#215 @ 814,207: 29x29
#216 @ 618,653: 14x25
#217 @ 664,101: 16x23
#218 @ 703,285: 27x23
#219 @ 825,438: 23x16
#220 @ 265,725: 27x20
#221 @ 18,561: 28x24
#222 @ 469,252: 17x11
#223 @ 388,520: 29x16
#224 @ 382,492: 15x29
#225 @ 452,449: 26x13
#226 @ 72,803: 23x17
#227 @ 652,84: 7x15
#228 @ 27,205: 20x25
#229 @ 330,74: 19x17
#230 @ 805,24: 25x14
#231 @ 405,578: 18x21
#232 @ 242,393: 27x26
#233 @ 216,606: 22x11
#234 @ 734,870: 18x14
#235 @ 780,737: 14x27
#236 @ 154,502: 4x10
#237 @ 912,536: 22x13
#238 @ 365,413: 19x10
#239 @ 85,859: 11x12
#240 @ 973,708: 27x14
#241 @ 193,149: 29x26
#242 @ 958,418: 14x28
#243 @ 818,875: 19x14
#244 @ 345,0: 10x21
#245 @ 641,182: 26x17
#246 @ 694,276: 26x14
#247 @ 563,413: 12x16
#248 @ 303,702: 24x27
#249 @ 131,145: 17x24
#250 @ 298,135: 19x27
#251 @ 87,306: 10x14
#252 @ 178,180: 11x15
#253 @ 39,587: 25x15
#254 @ 391,61: 27x28
#255 @ 840,758: 13x14
#256 @ 406,714: 12x25
#257 @ 385,184: 16x23
#258 @ 448,913: 26x26
#259 @ 847,117: 26x22
#260 @ 956,371: 12x24
#261 @ 600,964: 29x11
#262 @ 217,519: 20x24
#263 @ 75,805: 4x12
#264 @ 137,452: 10x15
#265 @ 406,299: 24x14
#266 @ 48,871: 23x14
#267 @ 571,234: 23x24
#268 @ 134,745: 28x27
#269 @ 739,155: 28x25
#270 @ 349,784: 12x25
#271 @ 653,953: 14x21
#272 @ 122,561: 19x11
#273 @ 195,373: 18x29
#274 @ 290,90: 22x23
#275 @ 829,493: 27x18
#276 @ 929,536: 13x13
#277 @ 82,23: 23x27
#278 @ 53,846: 21x10
#279 @ 365,656: 13x16
#280 @ 274,79: 21x17
#281 @ 535,193: 16x27
#282 @ 969,552: 16x27
#283 @ 278,116: 29x12
#284 @ 111,173: 21x23
#285 @ 3,568: 17x10
#286 @ 425,567: 17x21
#287 @ 447,436: 27x20
#288 @ 8,129: 20x15
#289 @ 477,133: 14x10
#290 @ 261,948: 6x4
#291 @ 339,833: 19x15
#292 @ 596,665: 20x12
#293 @ 638,255: 16x13
#294 @ 488,164: 19x20
#295 @ 761,106: 17x23
#296 @ 799,25: 27x13
#297 @ 277,172: 23x28
#298 @ 1,555: 23x28
#299 @ 262,141: 10x25
#300 @ 530,231: 11x17
#301 @ 311,587: 13x11
#302 @ 95,343: 13x14
#303 @ 27,755: 27x26
#304 @ 63,605: 20x24
#305 @ 502,678: 22x25
#306 @ 963,451: 13x11
#307 @ 391,346: 13x24
#308 @ 299,192: 15x19
#309 @ 330,9: 23x22
#310 @ 111,351: 10x10
#311 @ 204,7: 16x12
#312 @ 646,296: 11x14
#313 @ 273,744: 14x15
#314 @ 229,296: 17x21
#315 @ 644,214: 29x11
#316 @ 799,403: 29x14
#317 @ 565,794: 24x19
#318 @ 91,348: 23x24
#319 @ 557,164: 24x29
#320 @ 146,533: 16x25
#321 @ 629,963: 13x15
#322 @ 710,385: 20x10
#323 @ 420,832: 18x17
#324 @ 24,400: 24x26
#325 @ 662,52: 17x18
#326 @ 826,550: 21x11
#327 @ 172,790: 14x24
#328 @ 41,534: 19x26
#329 @ 450,277: 26x26
#330 @ 770,624: 19x11
#331 @ 871,936: 10x20
#332 @ 824,265: 21x10
#333 @ 297,88: 13x19
#334 @ 18,538: 13x16
#335 @ 289,182: 20x25
#336 @ 722,234: 14x18
#337 @ 673,405: 29x27
#338 @ 816,348: 27x29
#339 @ 398,52: 17x14
#340 @ 146,893: 18x20
#341 @ 241,552: 24x21
#342 @ 728,388: 14x23
#343 @ 81,250: 18x16
#344 @ 654,501: 19x19
#345 @ 349,422: 19x24
#346 @ 66,39: 19x15
#347 @ 560,238: 21x14
#348 @ 753,434: 17x10
#349 @ 191,199: 18x16
#350 @ 131,188: 28x16
#351 @ 582,356: 18x19
#352 @ 324,92: 15x10
#353 @ 955,256: 11x29
#354 @ 920,449: 17x16
#355 @ 308,357: 11x19
#356 @ 827,903: 19x27
#357 @ 447,158: 16x11
#358 @ 361,749: 25x25
#359 @ 159,649: 22x26
#360 @ 197,732: 22x13
#361 @ 858,889: 13x19
#362 @ 869,800: 25x11
#363 @ 967,687: 29x29
#364 @ 219,404: 14x22
#365 @ 878,735: 28x16
#366 @ 848,374: 12x19
#367 @ 521,523: 24x24
#368 @ 147,893: 17x12
#369 @ 84,157: 21x20
#370 @ 369,135: 21x17
#371 @ 262,138: 16x20
#372 @ 402,930: 21x29
#373 @ 306,90: 27x24
#374 @ 256,622: 3x5
#375 @ 250,875: 23x23
#376 @ 925,694: 12x16
#377 @ 169,167: 23x16
#378 @ 876,448: 28x17
#379 @ 924,284: 25x29
#380 @ 598,253: 13x18
#381 @ 198,248: 21x27
#382 @ 638,842: 22x24
#383 @ 398,733: 19x27
#384 @ 542,56: 14x12
#385 @ 257,424: 14x10
#386 @ 308,337: 22x27
#387 @ 504,448: 14x16
#388 @ 456,922: 29x21
#389 @ 155,88: 20x24
#390 @ 9,706: 25x24
#391 @ 645,357: 28x15
#392 @ 34,699: 12x22
#393 @ 851,621: 10x17
#394 @ 653,854: 21x11
#395 @ 294,736: 13x23
#396 @ 407,573: 26x17
#397 @ 823,418: 19x24
#398 @ 315,365: 15x16
#399 @ 282,185: 26x14
#400 @ 602,907: 22x20
#401 @ 336,783: 26x17
#402 @ 546,328: 15x11
#403 @ 848,488: 29x20
#404 @ 6,499: 12x23
#405 @ 861,629: 22x24
#406 @ 28,209: 25x28
#407 @ 221,738: 23x20
#408 @ 306,758: 19x28
#409 @ 154,521: 21x24
#410 @ 830,269: 18x18
#411 @ 594,905: 28x13
#412 @ 261,810: 24x26
#413 @ 633,40: 16x12
#414 @ 326,351: 10x22
#415 @ 261,912: 23x21
#416 @ 882,470: 20x18
#417 @ 774,31: 29x10
#418 @ 809,921: 25x21
#419 @ 840,537: 10x21
#420 @ 737,802: 21x29
#421 @ 539,976: 29x19
#422 @ 611,124: 23x13
#423 @ 70,592: 26x29
#424 @ 617,965: 11x11
#425 @ 799,32: 18x23
#426 @ 281,725: 13x20
#427 @ 959,678: 29x15
#428 @ 862,874: 22x29
#429 @ 759,667: 22x24
#430 @ 66,400: 10x10
#431 @ 126,242: 21x18
#432 @ 835,385: 27x21
#433 @ 343,737: 10x20
#434 @ 970,280: 29x28
#435 @ 386,889: 17x16
#436 @ 302,356: 14x25
#437 @ 8,513: 27x13
#438 @ 75,364: 20x20
#439 @ 970,336: 16x20
#440 @ 440,63: 29x22
#441 @ 795,752: 14x25
#442 @ 331,787: 26x19
#443 @ 378,53: 23x11
#444 @ 444,840: 16x7
#445 @ 806,89: 21x29
#446 @ 236,496: 29x10
#447 @ 879,556: 17x15
#448 @ 631,800: 14x23
#449 @ 540,388: 14x12
#450 @ 859,629: 22x28
#451 @ 103,348: 15x27
#452 @ 310,22: 22x12
#453 @ 542,99: 23x22
#454 @ 63,505: 29x15
#455 @ 333,479: 23x23
#456 @ 60,132: 22x24
#457 @ 297,220: 27x22
#458 @ 331,560: 10x25
#459 @ 583,665: 17x29
#460 @ 512,786: 14x20
#461 @ 962,432: 11x10
#462 @ 951,374: 14x22
#463 @ 169,275: 29x20
#464 @ 428,624: 19x26
#465 @ 145,203: 29x29
#466 @ 96,211: 29x21
#467 @ 211,921: 15x12
#468 @ 520,787: 11x10
#469 @ 710,330: 17x17
#470 @ 248,403: 10x29
#471 @ 393,900: 16x26
#472 @ 949,206: 22x27
#473 @ 170,348: 13x12
#474 @ 878,703: 20x10
#475 @ 488,481: 20x28
#476 @ 929,447: 13x23
#477 @ 246,389: 14x28
#478 @ 611,956: 28x11
#479 @ 397,934: 20x15
#480 @ 948,476: 25x25
#481 @ 184,760: 15x25
#482 @ 260,100: 22x23
#483 @ 577,336: 25x21
#484 @ 359,261: 19x10
#485 @ 876,803: 28x18
#486 @ 941,128: 19x20
#487 @ 248,378: 10x26
#488 @ 36,431: 19x29
#489 @ 742,561: 11x17
#490 @ 862,65: 19x19
#491 @ 252,102: 19x21
#492 @ 957,321: 28x21
#493 @ 331,444: 27x21
#494 @ 576,784: 20x21
#495 @ 597,487: 22x27
#496 @ 302,651: 20x15
#497 @ 392,749: 25x24
#498 @ 266,419: 14x26
#499 @ 201,959: 25x11
#500 @ 854,445: 29x15
#501 @ 514,580: 19x29
#502 @ 37,722: 13x29
#503 @ 206,567: 18x13
#504 @ 822,346: 18x29
#505 @ 738,329: 17x21
#506 @ 834,365: 14x14
#507 @ 826,877: 15x18
#508 @ 23,271: 23x16
#509 @ 12,534: 27x20
#510 @ 568,232: 14x22
#511 @ 939,816: 25x16
#512 @ 464,603: 11x17
#513 @ 28,274: 14x11
#514 @ 801,204: 29x23
#515 @ 837,542: 18x22
#516 @ 469,909: 20x10
#517 @ 666,396: 21x10
#518 @ 615,698: 25x11
#519 @ 606,351: 16x11
#520 @ 937,408: 26x21
#521 @ 207,244: 14x24
#522 @ 772,697: 10x15
#523 @ 350,762: 29x19
#524 @ 344,417: 15x15
#525 @ 286,192: 23x20
#526 @ 359,764: 15x16
#527 @ 456,857: 25x28
#528 @ 828,654: 20x23
#529 @ 768,802: 27x24
#530 @ 523,917: 26x13
#531 @ 371,30: 18x11
#532 @ 11,281: 20x15
#533 @ 805,924: 29x11
#534 @ 25,196: 29x20
#535 @ 562,588: 13x18
#536 @ 385,738: 22x24
#537 @ 139,38: 10x12
#538 @ 436,546: 24x15
#539 @ 300,335: 22x28
#540 @ 361,676: 24x20
#541 @ 742,427: 16x29
#542 @ 814,217: 25x26
#543 @ 859,36: 15x14
#544 @ 323,238: 19x12
#545 @ 661,60: 21x28
#546 @ 236,394: 22x12
#547 @ 337,14: 14x17
#548 @ 917,686: 12x14
#549 @ 927,130: 26x19
#550 @ 125,672: 18x22
#551 @ 516,687: 19x16
#552 @ 664,519: 18x13
#553 @ 255,99: 16x12
#554 @ 461,281: 23x21
#555 @ 684,676: 20x15
#556 @ 258,731: 28x12
#557 @ 847,983: 21x13
#558 @ 984,318: 11x14
#559 @ 439,923: 5x5
#560 @ 178,330: 20x20
#561 @ 962,946: 18x24
#562 @ 649,813: 12x26
#563 @ 16,252: 27x24
#564 @ 13,942: 12x25
#565 @ 189,484: 13x11
#566 @ 959,104: 20x23
#567 @ 300,246: 19x25
#568 @ 840,258: 14x16
#569 @ 754,738: 10x7
#570 @ 878,921: 23x18
#571 @ 417,540: 14x12
#572 @ 232,661: 27x12
#573 @ 554,758: 12x17
#574 @ 955,173: 16x18
#575 @ 438,579: 21x11
#576 @ 571,740: 24x29
#577 @ 218,912: 16x25
#578 @ 667,63: 25x18
#579 @ 683,642: 16x24
#580 @ 308,115: 14x28
#581 @ 419,4: 27x26
#582 @ 812,249: 29x29
#583 @ 818,442: 16x19
#584 @ 453,136: 27x27
#585 @ 17,202: 15x23
#586 @ 65,834: 24x19
#587 @ 810,752: 28x22
#588 @ 54,892: 14x20
#589 @ 372,134: 11x17
#590 @ 203,845: 19x15
#591 @ 109,491: 26x13
#592 @ 118,7: 19x22
#593 @ 871,113: 21x25
#594 @ 52,311: 24x23
#595 @ 254,222: 25x24
#596 @ 787,893: 24x11
#597 @ 442,435: 20x19
#598 @ 586,439: 14x17
#599 @ 37,114: 20x17
#600 @ 108,168: 19x25
#601 @ 146,187: 14x16
#602 @ 201,576: 17x23
#603 @ 387,759: 21x11
#604 @ 861,520: 10x20
#605 @ 834,801: 16x14
#606 @ 909,568: 13x21
#607 @ 111,947: 27x21
#608 @ 326,584: 13x26
#609 @ 312,235: 25x17
#610 @ 734,267: 17x21
#611 @ 168,259: 14x21
#612 @ 753,541: 20x17
#613 @ 83,879: 20x13
#614 @ 778,695: 20x20
#615 @ 601,859: 29x14
#616 @ 48,115: 12x18
#617 @ 472,455: 11x25
#618 @ 436,918: 12x15
#619 @ 118,655: 17x29
#620 @ 375,418: 13x14
#621 @ 32,503: 14x24
#622 @ 562,463: 13x20
#623 @ 883,444: 10x28
#624 @ 948,256: 26x15
#625 @ 710,715: 14x19
#626 @ 86,858: 26x22
#627 @ 211,220: 24x16
#628 @ 159,626: 17x29
#629 @ 747,9: 22x10
#630 @ 203,254: 22x27
#631 @ 52,677: 12x29
#632 @ 233,163: 3x5
#633 @ 880,694: 16x28
#634 @ 778,65: 3x7
#635 @ 608,625: 21x12
#636 @ 198,350: 29x25
#637 @ 428,836: 29x21
#638 @ 39,778: 16x26
#639 @ 234,106: 17x16
#640 @ 130,453: 17x12
#641 @ 51,602: 29x26
#642 @ 425,545: 16x26
#643 @ 553,554: 29x12
#644 @ 822,108: 19x20
#645 @ 472,260: 27x18
#646 @ 731,173: 17x21
#647 @ 532,360: 12x22
#648 @ 583,801: 13x19
#649 @ 558,595: 20x16
#650 @ 226,895: 11x28
#651 @ 956,243: 12x20
#652 @ 156,596: 14x14
#653 @ 426,189: 21x10
#654 @ 425,45: 25x17
#655 @ 461,715: 19x21
#656 @ 659,925: 13x17
#657 @ 312,762: 21x24
#658 @ 868,50: 15x24
#659 @ 388,168: 15x17
#660 @ 945,704: 20x29
#661 @ 587,761: 12x22
#662 @ 182,816: 27x22
#663 @ 251,226: 22x14
#664 @ 609,160: 24x26
#665 @ 437,877: 11x11
#666 @ 41,261: 23x14
#667 @ 977,31: 10x29
#668 @ 22,180: 13x11
#669 @ 830,797: 12x15
#670 @ 785,441: 15x26
#671 @ 647,247: 12x27
#672 @ 447,594: 23x10
#673 @ 817,607: 26x19
#674 @ 627,862: 20x10
#675 @ 391,43: 16x29
#676 @ 601,955: 12x26
#677 @ 748,870: 16x11
#678 @ 857,484: 16x22
#679 @ 953,719: 19x23
#680 @ 525,922: 19x4
#681 @ 689,525: 18x23
#682 @ 462,97: 26x13
#683 @ 138,670: 13x19
#684 @ 750,114: 20x27
#685 @ 492,311: 11x21
#686 @ 624,497: 24x13
#687 @ 754,432: 15x19
#688 @ 201,563: 10x17
#689 @ 581,106: 10x26
#690 @ 300,936: 21x19
#691 @ 558,409: 27x10
#692 @ 105,467: 13x14
#693 @ 57,178: 12x10
#694 @ 585,440: 23x14
#695 @ 204,664: 24x18
#696 @ 350,922: 26x20
#697 @ 40,909: 26x17
#698 @ 253,619: 10x13
#699 @ 811,485: 16x22
#700 @ 373,26: 16x22
#701 @ 461,667: 25x10
#702 @ 313,408: 27x16
#703 @ 787,464: 28x27
#704 @ 970,481: 25x10
#705 @ 383,758: 17x20
#706 @ 848,310: 19x26
#707 @ 384,23: 21x10
#708 @ 797,288: 11x23
#709 @ 35,794: 11x14
#710 @ 264,207: 18x22
#711 @ 214,606: 20x15
#712 @ 347,339: 28x15
#713 @ 421,766: 13x25
#714 @ 837,583: 13x15
#715 @ 89,28: 13x15
#716 @ 150,793: 21x17
#717 @ 455,451: 19x22
#718 @ 461,371: 26x28
#719 @ 99,261: 15x13
#720 @ 815,402: 10x17
#721 @ 298,936: 14x22
#722 @ 938,748: 26x27
#723 @ 557,263: 29x10
#724 @ 611,746: 11x22
#725 @ 0,437: 28x25
#726 @ 466,697: 10x29
#727 @ 656,115: 21x23
#728 @ 865,971: 23x26
#729 @ 943,740: 11x27
#730 @ 581,751: 22x25
#731 @ 810,205: 12x10
#732 @ 178,76: 14x14
#733 @ 335,593: 12x24
#734 @ 194,559: 10x19
#735 @ 186,63: 14x22
#736 @ 227,591: 15x17
#737 @ 730,751: 12x18
#738 @ 679,497: 18x29
#739 @ 792,15: 6x19
#740 @ 229,313: 7x10
#741 @ 802,209: 17x27
#742 @ 890,971: 14x13
#743 @ 551,256: 18x17
#744 @ 206,745: 19x16
#745 @ 299,954: 14x17
#746 @ 217,573: 13x11
#747 @ 919,305: 27x22
#748 @ 530,33: 28x27
#749 @ 703,373: 29x29
#750 @ 149,142: 27x21
#751 @ 721,285: 12x15
#752 @ 389,7: 25x26
#753 @ 812,241: 24x21
#754 @ 450,144: 14x16
#755 @ 647,895: 15x25
#756 @ 556,173: 24x27
#757 @ 159,261: 23x22
#758 @ 33,455: 12x13
#759 @ 338,325: 14x15
#760 @ 567,77: 13x22
#761 @ 339,821: 29x11
#762 @ 328,488: 4x3
#763 @ 14,180: 11x27
#764 @ 274,254: 27x21
#765 @ 796,747: 17x23
#766 @ 528,451: 25x17
#767 @ 196,796: 10x21
#768 @ 48,391: 12x19
#769 @ 644,484: 11x14
#770 @ 293,777: 19x22
#771 @ 657,82: 28x20
#772 @ 734,962: 22x25
#773 @ 455,95: 13x14
#774 @ 440,198: 27x28
#775 @ 581,742: 28x25
#776 @ 450,48: 13x17
#777 @ 956,246: 26x28
#778 @ 110,500: 14x19
#779 @ 666,908: 19x13
#780 @ 709,234: 21x13
#781 @ 98,814: 18x27
#782 @ 32,182: 27x28
#783 @ 519,457: 28x13
#784 @ 477,840: 29x18
#785 @ 826,564: 26x24
#786 @ 351,425: 13x17
#787 @ 311,927: 21x17
#788 @ 524,477: 22x15
#789 @ 257,267: 22x25
#790 @ 85,525: 19x18
#791 @ 364,586: 16x15
#792 @ 14,72: 15x25
#793 @ 877,378: 13x21
#794 @ 519,232: 18x17
#795 @ 15,570: 17x21
#796 @ 793,563: 25x20
#797 @ 823,758: 15x20
#798 @ 617,269: 11x16
#799 @ 430,930: 27x26
#800 @ 325,14: 18x26
#801 @ 28,883: 17x16
#802 @ 843,585: 15x16
#803 @ 572,673: 26x21
#804 @ 668,135: 28x19
#805 @ 309,31: 21x18
#806 @ 731,740: 24x22
#807 @ 776,59: 27x20
#808 @ 716,701: 22x28
#809 @ 685,811: 15x18
#810 @ 625,662: 12x25
#811 @ 447,684: 26x26
#812 @ 591,73: 17x25
#813 @ 853,307: 25x13
#814 @ 648,372: 14x23
#815 @ 282,967: 22x20
#816 @ 654,22: 25x21
#817 @ 151,498: 11x19
#818 @ 349,650: 12x28
#819 @ 841,129: 16x28
#820 @ 886,967: 14x10
#821 @ 127,54: 27x26
#822 @ 86,586: 20x11
#823 @ 553,304: 18x20
#824 @ 185,543: 16x26
#825 @ 251,363: 3x4
#826 @ 286,716: 23x25
#827 @ 617,344: 24x22
#828 @ 620,163: 9x5
#829 @ 535,476: 24x13
#830 @ 636,285: 26x19
#831 @ 929,321: 11x25
#832 @ 8,8: 14x28
#833 @ 243,614: 12x11
#834 @ 972,249: 11x16
#835 @ 296,268: 13x15
#836 @ 208,644: 29x23
#837 @ 859,385: 28x16
#838 @ 603,350: 29x20
#839 @ 442,827: 22x25
#840 @ 339,588: 20x19
#841 @ 310,81: 23x16
#842 @ 403,718: 16x16
#843 @ 315,771: 18x12
#844 @ 644,80: 29x15
#845 @ 573,80: 25x13
#846 @ 740,550: 16x20
#847 @ 127,437: 19x14
#848 @ 121,483: 11x26
#849 @ 471,603: 14x13
#850 @ 341,504: 18x21
#851 @ 983,308: 16x23
#852 @ 455,45: 24x29
#853 @ 13,12: 10x20
#854 @ 610,33: 26x23
#855 @ 427,6: 12x22
#856 @ 951,182: 12x14
#857 @ 564,245: 15x12
#858 @ 640,50: 27x18
#859 @ 46,915: 10x26
#860 @ 133,753: 21x28
#861 @ 590,251: 13x14
#862 @ 866,531: 26x13
#863 @ 560,408: 15x18
#864 @ 133,764: 15x28
#865 @ 395,455: 28x27
#866 @ 170,805: 14x18
#867 @ 216,253: 11x28
#868 @ 741,862: 21x17
#869 @ 342,832: 25x13
#870 @ 691,529: 13x3
#871 @ 93,372: 21x24
#872 @ 431,458: 29x12
#873 @ 242,650: 10x14
#874 @ 35,920: 12x10
#875 @ 804,300: 17x22
#876 @ 890,720: 16x23
#877 @ 219,136: 14x24
#878 @ 276,507: 21x13
#879 @ 670,847: 28x28
#880 @ 597,19: 18x27
#881 @ 326,483: 29x12
#882 @ 430,202: 15x18
#883 @ 124,204: 28x21
#884 @ 747,605: 28x19
#885 @ 379,926: 10x13
#886 @ 314,33: 27x11
#887 @ 622,964: 19x22
#888 @ 761,894: 13x19
#889 @ 241,772: 10x23
#890 @ 662,655: 28x26
#891 @ 805,290: 22x12
#892 @ 444,638: 22x29
#893 @ 865,769: 19x18
#894 @ 67,661: 27x22
#895 @ 179,758: 23x20
#896 @ 227,188: 17x27
#897 @ 307,400: 14x23
#898 @ 375,768: 13x16
#899 @ 806,924: 21x11
#900 @ 192,412: 18x10
#901 @ 965,338: 13x15
#902 @ 528,793: 26x17
#903 @ 822,225: 25x26
#904 @ 488,902: 19x17
#905 @ 835,347: 20x20
#906 @ 799,393: 25x20
#907 @ 652,290: 15x23
#908 @ 313,30: 18x21
#909 @ 389,445: 29x22
#910 @ 470,52: 21x11
#911 @ 554,401: 15x20
#912 @ 612,887: 21x22
#913 @ 833,990: 27x10
#914 @ 127,125: 25x24
#915 @ 78,867: 23x26
#916 @ 13,144: 20x19
#917 @ 945,314: 20x13
#918 @ 525,33: 29x26
#919 @ 110,830: 21x15
#920 @ 703,65: 24x20
#921 @ 936,443: 19x25
#922 @ 383,526: 19x19
#923 @ 869,135: 17x15
#924 @ 950,454: 10x24
#925 @ 84,724: 13x8
#926 @ 754,258: 17x13
#927 @ 941,351: 27x20
#928 @ 971,344: 25x16
#929 @ 452,811: 19x16
#930 @ 656,29: 9x5
#931 @ 520,16: 3x3
#932 @ 65,143: 12x9
#933 @ 804,121: 21x19
#934 @ 134,150: 10x16
#935 @ 11,234: 23x17
#936 @ 786,95: 21x10
#937 @ 466,190: 23x22
#938 @ 624,952: 12x26
#939 @ 406,27: 29x26
#940 @ 39,251: 25x27
#941 @ 198,389: 13x25
#942 @ 846,2: 22x29
#943 @ 840,349: 13x21
#944 @ 495,183: 18x29
#945 @ 661,305: 14x19
#946 @ 575,197: 10x21
#947 @ 557,521: 18x17
#948 @ 401,755: 24x13
#949 @ 519,48: 15x27
#950 @ 590,727: 10x26
#951 @ 262,968: 16x14
#952 @ 177,795: 12x13
#953 @ 211,893: 25x22
#954 @ 85,514: 14x19
#955 @ 524,430: 25x21
#956 @ 836,805: 9x6
#957 @ 300,14: 17x28
#958 @ 219,699: 20x11
#959 @ 310,43: 19x16
#960 @ 117,379: 10x29
#961 @ 530,774: 22x25
#962 @ 843,584: 19x13
#963 @ 425,711: 10x10
#964 @ 271,975: 15x11
#965 @ 879,445: 10x11
#966 @ 433,341: 19x16
#967 @ 29,425: 20x24
#968 @ 247,361: 11x19
#969 @ 251,478: 21x22
#970 @ 730,781: 17x24
#971 @ 38,803: 25x29
#972 @ 654,257: 16x29
#973 @ 283,215: 25x14
#974 @ 198,692: 14x28
#975 @ 384,394: 19x13
#976 @ 639,148: 14x28
#977 @ 597,299: 29x16
#978 @ 748,803: 27x12
#979 @ 59,573: 19x23
#980 @ 313,133: 26x12
#981 @ 342,481: 12x18
#982 @ 207,794: 26x15
#983 @ 47,286: 27x27
#984 @ 88,663: 11x17
#985 @ 723,747: 13x17
#986 @ 299,716: 18x22
#987 @ 827,893: 21x21
#988 @ 482,396: 28x28
#989 @ 170,364: 29x12
#990 @ 973,342: 25x10
#991 @ 879,356: 23x28
#992 @ 435,352: 21x16
#993 @ 432,290: 17x29
#994 @ 770,16: 25x26
#995 @ 39,687: 21x23
#996 @ 148,600: 10x13
#997 @ 279,787: 28x22
#998 @ 137,310: 29x14
#999 @ 867,554: 25x26
#1000 @ 949,341: 29x13
#1001 @ 931,220: 23x18
#1002 @ 394,527: 15x13
#1003 @ 914,429: 19x12
#1004 @ 116,315: 23x18
#1005 @ 27,698: 13x22
#1006 @ 872,814: 21x18
#1007 @ 618,470: 13x22
#1008 @ 274,708: 13x23
#1009 @ 869,684: 23x27
#1010 @ 455,560: 23x26
#1011 @ 668,923: 10x16
#1012 @ 863,65: 17x27
#1013 @ 143,179: 12x28
#1014 @ 793,136: 25x23
#1015 @ 14,850: 27x12
#1016 @ 715,326: 19x14
#1017 @ 58,834: 13x28
#1018 @ 657,895: 25x16
#1019 @ 870,752: 26x23
#1020 @ 846,137: 26x23
#1021 @ 877,761: 22x23
#1022 @ 527,234: 29x13
#1023 @ 396,522: 20x26
#1024 @ 919,416: 13x29
#1025 @ 63,549: 29x23
#1026 @ 906,305: 26x16
#1027 @ 91,849: 14x16
#1028 @ 625,658: 15x18
#1029 @ 77,721: 29x15
#1030 @ 958,815: 13x14
#1031 @ 527,104: 11x12
#1032 @ 447,515: 26x17
#1033 @ 610,976: 19x21
#1034 @ 711,174: 21x11
#1035 @ 235,595: 13x19
#1036 @ 750,871: 26x17
#1037 @ 253,593: 13x19
#1038 @ 375,660: 20x25
#1039 @ 10,131: 7x8
#1040 @ 939,344: 23x11
#1041 @ 339,897: 12x26
#1042 @ 602,293: 10x26
#1043 @ 263,352: 15x25
#1044 @ 655,131: 22x13
#1045 @ 95,257: 21x28
#1046 @ 527,107: 26x14
#1047 @ 124,284: 17x16
#1048 @ 589,788: 29x22
#1049 @ 754,342: 10x21
#1050 @ 823,84: 19x21
#1051 @ 506,657: 21x23
#1052 @ 917,933: 17x28
#1053 @ 307,596: 27x13
#1054 @ 239,570: 18x22
#1055 @ 251,652: 14x28
#1056 @ 47,556: 13x20
#1057 @ 106,335: 29x21
#1058 @ 286,262: 19x29
#1059 @ 658,641: 26x10
#1060 @ 888,498: 13x16
#1061 @ 294,574: 14x25
#1062 @ 15,889: 28x12
#1063 @ 56,390: 11x20
#1064 @ 497,322: 12x16
#1065 @ 35,165: 15x3
#1066 @ 353,435: 12x10
#1067 @ 857,55: 16x15
#1068 @ 234,609: 27x20
#1069 @ 269,204: 10x27
#1070 @ 659,655: 22x15
#1071 @ 499,662: 22x28
#1072 @ 649,902: 9x11
#1073 @ 817,482: 16x20
#1074 @ 418,795: 25x20
#1075 @ 813,904: 10x25
#1076 @ 773,609: 21x22
#1077 @ 450,735: 21x16
#1078 @ 739,170: 24x10
#1079 @ 249,103: 14x11
#1080 @ 241,909: 24x14
#1081 @ 122,231: 27x26
#1082 @ 48,734: 11x19
#1083 @ 823,743: 19x18
#1084 @ 142,679: 18x10
#1085 @ 565,850: 16x11
#1086 @ 263,603: 4x7
#1087 @ 970,709: 15x15
#1088 @ 42,840: 15x24
#1089 @ 949,723: 13x21
#1090 @ 781,483: 23x28
#1091 @ 329,241: 26x10
#1092 @ 531,220: 29x26
#1093 @ 880,740: 29x11
#1094 @ 277,313: 10x14
#1095 @ 540,57: 26x24
#1096 @ 830,659: 18x28
#1097 @ 374,606: 12x26
#1098 @ 636,63: 28x11
#1099 @ 933,905: 19x13
#1100 @ 429,586: 17x20
#1101 @ 131,113: 14x22
#1102 @ 340,819: 13x24
#1103 @ 761,58: 16x21
#1104 @ 760,355: 9x10
#1105 @ 231,84: 14x29
#1106 @ 638,367: 28x25
#1107 @ 770,261: 12x19
#1108 @ 367,797: 18x23
#1109 @ 530,348: 18x19
#1110 @ 568,717: 19x24
#1111 @ 467,725: 14x16
#1112 @ 14,175: 27x20
#1113 @ 439,539: 22x28
#1114 @ 202,565: 20x23
#1115 @ 974,280: 25x23
#1116 @ 528,527: 18x17
#1117 @ 547,332: 10x23
#1118 @ 91,584: 13x10
#1119 @ 828,366: 10x28
#1120 @ 86,842: 29x28
#1121 @ 437,1: 25x17
#1122 @ 358,401: 22x23
#1123 @ 468,822: 26x16
#1124 @ 58,844: 13x26
#1125 @ 288,705: 17x11
#1126 @ 322,540: 27x27
#1127 @ 628,838: 24x23
#1128 @ 469,502: 26x10
#1129 @ 937,336: 29x22
#1130 @ 615,676: 15x13
#1131 @ 502,687: 23x14
#1132 @ 235,706: 15x25
#1133 @ 369,36: 11x28
#1134 @ 98,720: 22x13
#1135 @ 465,464: 27x14
#1136 @ 828,202: 21x20
#1137 @ 721,441: 16x28
#1138 @ 69,482: 16x10
#1139 @ 105,755: 23x21
#1140 @ 105,438: 26x13
#1141 @ 846,630: 20x13
#1142 @ 612,19: 25x14
#1143 @ 618,613: 16x13
#1144 @ 491,174: 29x20
#1145 @ 388,399: 11x16
#1146 @ 232,53: 19x13
#1147 @ 493,580: 11x14
#1148 @ 820,76: 13x28
#1149 @ 283,103: 28x11
#1150 @ 332,749: 29x19
#1151 @ 288,269: 20x18
#1152 @ 225,305: 26x25
#1153 @ 640,801: 16x17
#1154 @ 301,161: 25x23
#1155 @ 505,103: 29x25
#1156 @ 179,526: 15x23
#1157 @ 937,318: 26x19
#1158 @ 452,605: 20x11
#1159 @ 895,672: 21x29
#1160 @ 192,740: 20x15
#1161 @ 347,537: 13x11
#1162 @ 633,181: 13x23
#1163 @ 575,914: 17x21
#1164 @ 793,401: 23x20
#1165 @ 296,801: 15x29
#1166 @ 949,398: 22x12
#1167 @ 49,225: 16x10
#1168 @ 283,513: 8x3
#1169 @ 456,497: 16x15
#1170 @ 105,452: 15x17
#1171 @ 170,966: 11x24
#1172 @ 574,795: 12x19
#1173 @ 745,14: 22x23
#1174 @ 255,310: 18x14
#1175 @ 17,326: 24x26
#1176 @ 735,687: 25x20
#1177 @ 764,883: 29x15
#1178 @ 602,572: 18x26
#1179 @ 666,916: 15x12
#1180 @ 246,762: 18x28
#1181 @ 202,451: 14x20
#1182 @ 560,801: 25x10
#1183 @ 817,767: 22x11
#1184 @ 814,313: 17x13
#1185 @ 44,613: 10x24
#1186 @ 503,441: 27x10
#1187 @ 484,374: 18x16
#1188 @ 815,724: 29x19
#1189 @ 923,702: 25x21
#1190 @ 408,25: 14x15
#1191 @ 590,710: 17x16
#1192 @ 4,321: 20x15
#1193 @ 723,759: 24x25
#1194 @ 248,761: 28x28
#1195 @ 246,572: 26x21
#1196 @ 434,463: 25x10
#1197 @ 342,661: 18x16
#1198 @ 699,817: 23x15
#1199 @ 646,371: 10x27
#1200 @ 30,388: 24x13
#1201 @ 50,876: 11x19
#1202 @ 11,849: 11x20
#1203 @ 360,922: 23x27
#1204 @ 532,218: 18x27
#1205 @ 588,718: 19x18
#1206 @ 197,491: 20x14
#1207 @ 0,547: 15x19
#1208 @ 233,556: 17x22
#1209 @ 560,172: 20x16
#1210 @ 806,284: 15x12
#1211 @ 632,674: 27x13
#1212 @ 53,846: 29x22
#1213 @ 126,770: 13x18
#1214 @ 859,429: 19x28
#1215 @ 221,719: 13x10
#1216 @ 209,400: 26x21
#1217 @ 348,934: 12x26
#1218 @ 949,447: 24x24
#1219 @ 521,367: 28x10
#1220 @ 369,659: 24x22
#1221 @ 473,6: 27x21
#1222 @ 532,686: 15x21
#1223 @ 609,960: 17x24
#1224 @ 475,548: 12x24
#1225 @ 712,278: 27x16
#1226 @ 33,162: 21x11
#1227 @ 3,866: 20x20
#1228 @ 785,73: 14x26
#1229 @ 130,179: 25x29
#1230 @ 209,540: 25x28
#1231 @ 220,27: 13x17
#1232 @ 948,474: 18x28
#1233 @ 647,228: 21x21
#1234 @ 362,797: 25x11
#1235 @ 966,265: 16x13
#1236 @ 412,50: 22x17
#1237 @ 779,552: 21x24
#1238 @ 760,63: 26x21
#1239 @ 52,70: 29x23
#1240 @ 47,15: 29x10
#1241 @ 956,575: 20x19
#1242 @ 760,536: 19x24
#1243 @ 635,702: 16x19
#1244 @ 892,166: 28x16
#1245 @ 0,430: 27x19
#1246 @ 883,387: 10x10
#1247 @ 88,666: 11x19
#1248 @ 640,250: 16x20
#1249 @ 21,220: 26x15
#1250 @ 976,55: 14x15
#1251 @ 728,372: 19x12
#1252 @ 14,937: 13x11
#1253 @ 655,125: 25x11
#1254 @ 617,346: 15x27
#1255 @ 943,383: 28x10
#1256 @ 951,221: 29x23
#1257 @ 482,662: 16x28
#1258 @ 806,546: 15x26
#1259 @ 370,604: 23x13
#1260 @ 120,643: 10x22
#1261 @ 98,447: 20x23
#1262 @ 764,800: 24x20
#1263 @ 427,192: 16x23
#1264 @ 115,720: 16x13
#1265 @ 257,945: 14x14
#1266 @ 511,445: 18x26
#1267 @ 633,221: 29x16
#1268 @ 615,819: 28x28
#1269 @ 89,311: 19x14
#1270 @ 231,825: 28x17
#1271 @ 133,0: 29x22
#1272 @ 220,822: 13x18
#1273 @ 699,690: 23x10
#1274 @ 91,441: 22x20
#1275 @ 213,788: 22x19
#1276 @ 873,458: 19x28
#1277 @ 459,490: 23x17
#1278 @ 215,963: 28x23
#1279 @ 56,12: 22x28
#1280 @ 644,937: 17x26
#1281 @ 613,397: 17x20
#1282 @ 559,468: 15x14
#1283 @ 642,244: 17x10
#1284 @ 140,779: 14x22
#1285 @ 232,313: 25x18
#1286 @ 614,737: 22x29
#1287 @ 790,187: 23x20
#1288 @ 166,537: 24x23
#1289 @ 954,368: 15x17
#1290 @ 294,957: 11x16
#1291 @ 95,170: 25x12
#1292 @ 208,831: 20x20
#1293 @ 915,752: 24x21
#1294 @ 790,497: 28x10
#1295 @ 214,12: 18x29
#1296 @ 872,20: 22x24
#1297 @ 84,24: 20x22
#1298 @ 72,859: 10x23
#1299 @ 414,871: 29x11
#1300 @ 148,534: 12x13
#1301 @ 883,17: 25x23
#1302 @ 95,854: 28x17
#1303 @ 264,878: 14x10
#1304 @ 257,942: 23x15
#1305 @ 400,523: 25x10
#1306 @ 125,555: 17x20
#1307 @ 913,427: 19x17
#1308 @ 890,502: 7x3
#1309 @ 868,445: 24x28
#1310 @ 820,759: 25x10
#1311 @ 643,82: 21x21
#1312 @ 249,117: 22x27
#1313 @ 320,935: 29x19
#1314 @ 376,492: 27x25
#1315 @ 467,666: 11x27
#1316 @ 608,583: 20x25
#1317 @ 445,672: 12x19
#1318 @ 428,284: 25x21
#1319 @ 286,411: 18x17
#1320 @ 81,539: 18x27
#1321 @ 600,969: 20x23
#1322 @ 358,571: 11x19
#1323 @ 594,348: 13x16
#1324 @ 401,337: 13x18
#1325 @ 45,843: 16x22
#1326 @ 18,80: 16x26
#1327 @ 946,465: 12x21
#1328 @ 10,206: 18x26
#1329 @ 178,967: 24x17
#1330 @ 722,531: 17x28
#1331 @ 415,525: 29x24
#1332 @ 376,90: 14x14
#1333 @ 103,530: 10x21
#1334 @ 958,103: 28x18
#1335 @ 893,579: 22x15
#1336 @ 913,924: 10x20
#1337 @ 272,436: 20x29
#1338 @ 823,63: 17x29
#1339 @ 2,495: 13x16
#1340 @ 202,2: 22x26
#1341 @ 268,735: 14x14
#1342 @ 261,628: 19x26
#1343 @ 672,888: 16x15
#1344 @ 884,17: 27x11
#1345 @ 318,911: 22x25
#1346 @ 433,843: 20x20
#1347 @ 796,526: 28x18
"""

func day3part2() throws -> Int {
    let inputArray = day3Input.split(separator: "\n")
    let inputGrids = try inputArray.map { try Grid(instructions: String($0)) }
    let gridsWithOverlap = Grid.withOverlap(grids: inputGrids)
    let nonOverlappingGrids = gridsWithOverlap.filter { $0.overlapping == false }
    guard
        nonOverlappingGrids.count == 1,
        let nonOverlappingGrid = nonOverlappingGrids.first
        else { throw Day3Error.notOnly1NonOverlappingGrid(nonOverlappingGrids.count) }
    return nonOverlappingGrid.id
}

do {
//    print(try day3part2())
} catch let error {
    print(error) // Throws a notOnly1NonOverlappingGrid error, with 0 non overlapping grids
}

// MARK: - Day 5

extension Character {
    var isLowercase: Bool {
        guard let scalar = self.unicodeScalars.first else { return false }
        return CharacterSet.lowercaseLetters.contains(scalar)
    }
    
    var isUppercase: Bool {
        guard let scalar = self.unicodeScalars.first else { return false }
        return CharacterSet.uppercaseLetters.contains(scalar)
    }
    
    var uppercase: Character {
        let stringSelf = String(self)
        let uppercase = stringSelf.uppercased()
        return uppercase.first!
    }
    
    var lowercase: Character {
        let stringSelf = String(self)
        let lowercase = stringSelf.lowercased()
        return lowercase.first!
    }
}

/*
 // Seems to all work
 "abcdefghijklmnopqrstuvwxyz".forEach { print($0.isLowercase) }
 "abcdefghijklmnopqrstuvwxyz".forEach { print($0.isUppercase) }
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ".forEach { print($0.isLowercase) }
 "ABCDEFGHIJKLMNOPQRSTUVWXYZ".forEach { print($0.isUppercase) }
 */

extension String {
    var containsReactiveUnits: Bool {
        for (characterIndex, character) in self.enumerated() {
            guard characterIndex < count - 1 else { continue }
            let stringCharacter = String(character)
            let lowerCaseCharacter = stringCharacter.lowercased()
            let nextCharacter = self[index(startIndex, offsetBy: characterIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() {
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        return true
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        return true
                    }
                }
            }
            
        }
        return false
    }
    
    var withoutReactiveUnitsSingleStep: String? {
        for (characterIndex, character) in self.enumerated() {
            guard characterIndex < count - 1 else { continue }
            let stringCharacter = String(character)
            let lowerCaseCharacter = stringCharacter.lowercased()
            let nextCharacter = self[index(startIndex, offsetBy: characterIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() {
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: characterIndex)...index(startIndex, offsetBy: characterIndex + 1))
                        return copy
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: characterIndex)...index(startIndex, offsetBy: characterIndex + 1))
                        return copy
                    }
                }
            }
            
        }
        return nil
    }
    
    /*
     This was an attempt to be smarter and return a pair of strings if a reactive pair was found.
     One string would be processed and not contain any reactive pairs of characters, and the other string would still require processing.
     Unfortunately this still does not handle cases when letters are brought together when removing reactive pairs of characters.
     */
    var splitWithoutReactiveUnitsStep: (processed: String, stillToProcess: String)? {
        for (characterIndex, character) in self.enumerated() {
            guard characterIndex < count - 1 else { continue } // Skip if last character
            let stringCharacter = String(character)
            let lowerCaseCharacter = stringCharacter.lowercased()
            let nextCharacter = self[index(startIndex, offsetBy: characterIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() { // If it's the same character
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        var complete = self
                        var toDo = self
                        
                        complete.removeSubrange(index(startIndex, offsetBy: characterIndex - 1)..<index(endIndex, offsetBy: 0))
                        toDo.removeSubrange(index(startIndex, offsetBy: 0)...index(startIndex, offsetBy: characterIndex + 1))
                        
                        return (complete, toDo)
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        var complete = self
                        var toDo = self
                        
                        complete.removeSubrange(index(startIndex, offsetBy: characterIndex)..<index(endIndex, offsetBy: 0))
                        toDo.removeSubrange(index(startIndex, offsetBy: 0)...index(startIndex, offsetBy: characterIndex + 1))
                        
                        if let lastCharacterOfComplete = complete.last {
                            complete = String(complete.dropLast())
                            toDo = String(lastCharacterOfComplete) + toDo
                        }
                        
                        return (complete, toDo)
                    }
                }
            }
        }
        
        return nil
    }
    
    /*
     This will loop through the string, remove the first reactive pair it finds, and then report where this reactive pair was found, therefore allowing later code to resume at this point and not need to loop back to the beginning and examine characters which are known to be OK.
     */
    func withoutFirstReactiveUnitsAfter(offsetIndex: Int = 0) -> (processedString: String, index: Int)? {
        var varIndex = offsetIndex
        
        while varIndex < count - 1 {
            let character           = self[index(startIndex, offsetBy: varIndex)]
            let stringCharacter     = String(character)
            let lowerCaseCharacter  = stringCharacter.lowercased()
            let nextCharacter       = self[index(startIndex, offsetBy: varIndex + 1)]
            let stringNextCharacter = String(nextCharacter)
            
            if lowerCaseCharacter == stringNextCharacter.lowercased() { // If it's the same character
                
                if character.isUppercase {
                    if lowerCaseCharacter == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: varIndex)...index(startIndex, offsetBy: varIndex + 1))
                        return (copy, max(0, varIndex - 1))
                    }
                } else if character.isLowercase {
                    if stringCharacter.uppercased() == stringNextCharacter {
                        var copy = self
                        copy.removeSubrange(index(startIndex, offsetBy: varIndex)...index(startIndex, offsetBy: varIndex + 1))
                        return (copy, max(0, varIndex - 1))
                    }
                }
            }
            
            varIndex += 1
        }
        
        return nil
    }
    
    var withoutReactiveUnits: String {
        var copy = self
        
        while let withoutReactiveUnitsSingleStep = copy.withoutReactiveUnitsSingleStep {
            copy = withoutReactiveUnitsSingleStep
            //            print(withoutReactiveUnitsSingleStep)
        }
        
        return copy
    }
    
    var withoutReactiveUnits2: String {
        var copy = self
        var startingIndex = 0
        
        while let (withoutFirstReactiveUnits, nextStartingIndex) = copy.withoutFirstReactiveUnitsAfter(offsetIndex: startingIndex) {
            copy = withoutFirstReactiveUnits
            startingIndex = nextStartingIndex
        }
        
        return copy
    }
    
    var possibleCharacters: [Character] {
        var charactersToReturn: [Character] = []
        
        for character in self {
            if charactersToReturn.contains(character) == false {
                charactersToReturn.append(character)
            }
        }
        
        return charactersToReturn
    }
    
    var setPossibleCharacters: Set<Character> {
        return Set(self)
    }
    
    var possibleCharactersLowercaseOnly: [Character] {
        var charactersToReturn: [Character] = []
        
        for character in self {
            let lowercase = character.lowercase
            
            if charactersToReturn.contains(lowercase) == false {
                charactersToReturn.append(lowercase)
            }
        }
        
        return charactersToReturn
    }
    
    var stringsWithoutCharacterOptions: [String] {
        return self.possibleCharactersLowercaseOnly.map { mapCharacter -> String in
            return self.filter { filterCharacter -> Bool in
                return (filterCharacter.uppercase == mapCharacter || filterCharacter.lowercase == mapCharacter) == false
            }
        }
    }
    
    var reactedStringsWithoutCharacterOptions: [String] {
        return stringsWithoutCharacterOptions.map {
            return $0.withoutReactiveUnits2
        }
    }
}

let day5Input = """

"""

func day5_part1() -> Int {
    let inputWithoutReactiveUnits = day5Input.withoutReactiveUnits
    return inputWithoutReactiveUnits.count
}

//print(day5_part1())

func day5_part1_2() -> Int {
    let inputWithoutReactiveUnits = day5Input.withoutReactiveUnits2
    return inputWithoutReactiveUnits.count // Returns 9704 (correct!) Takes 13 seconds
}

//print(day5_part1_2())

func day5_part2() -> Int {
    let options = day5Input.reactedStringsWithoutCharacterOptions
    
    let sortedOptions = options.sorted {
        $0.count < $1.count
    }
    
    return sortedOptions[0].count // Returns 6942 (correct)
}

//print(day5_part2())

let day6IDs = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","Ã","Å","Ã","Ã","Ã","Ã","Ã","Ã","Ã","â","Ã","Ã","Ã","Ã","Ã","Ã","Ã","Ã","Ã","Ã","Ã","á¸","á¸","á¸"]

extension Collection {
    
    /// Returns the element at the specified index if it is within bounds, otherwise nil.
    /// From [StackOverflow](https://stackoverflow.com/questions/25329186/safe-bounds-checked-array-lookup-in-swift-through-optional-bindings/25330930#25330930)
    subscript (safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

struct GridPoint {
    let x: Int
    let y: Int
    let id: String?
    let nearId: String?
    
    init(x: Int, y: Int, id: String? = nil, nearId: String? = nil) {
        self.x = x
        self.y = y
        self.id = id
        self.nearId = nearId
    }
    
    init(x: Int, y: Int, id: String? = nil) {
        self.x = x
        self.y = y
        
        self.id = id?.uppercased()
        self.nearId = id?.lowercased()
    }
    
    enum GridPointInitError: Swift.Error {
        case wrongSplitCount(actual: Int)
        case missingX(actual: String)
        case missingY(actual: String)
    }
    
    init(xAndY: String, id: String? = nil) throws {
        let split = xAndY.split { (character) -> Bool in
            return character == "," || character == " "
        }
        
        guard split.count == 2 else { throw GridPointInitError.wrongSplitCount(actual: split.count) }
        
        guard let intX = Int(split[0]) else { throw GridPointInitError.missingX(actual: String(split[0])) }
        guard let intY = Int(split[1]) else { throw GridPointInitError.missingY(actual: String(split[1])) }
        
        self.x = intX
        self.y = intY
        
        self.id = id?.uppercased()
        self.nearId = id?.lowercased()
    }
    
    func distanceTo(point: GridPoint) -> Int {
        let xDifference = x - point.x
        let yDifference = y - point.y
        
        let xAbs = abs(xDifference)
        let yAbs = abs(yDifference)
        
        let total = xAbs + yAbs
        
        return total
    }
    
    func nearestPoint(in array: [GridPoint]) -> GridPoint? {
        let sortedPoints = array.sorted(by: { $0.distanceTo(point: self) < $1.distanceTo(point: self) })
        return sortedPoints.first
    }
    
    func equidistantFrom(points: [GridPoint]) -> Bool {
        guard points.count >= 2 else { return false } // Make sure there are at least 2 points in the array
        let sortedPoints = points.sorted(by: { $0.distanceTo(point: self) < $1.distanceTo(point: self) })
        let firstPoint = sortedPoints[0]
        let secondPoint = sortedPoints[1]
        return distanceTo(point: firstPoint) == distanceTo(point: secondPoint)
    }
    
    func within(range: Int, of points: [GridPoint]) -> Bool {
        var total: Int = 0
        
        for gridpoint in points {
            let distance = distanceTo(point: gridpoint)
            total += distance
            if total > range {
                return false
            }
        }
        
        return true
    }
}

extension GridPoint: Equatable {
    static func ==(lhs: GridPoint, rhs: GridPoint) -> Bool {
        return lhs.x == rhs.x && lhs.y == rhs.y
    }
}

struct Day6 {
    
    static func blankGrid(width: Int, height: Int) -> String {
        let row = Array(repeating: ".", count: width)
        let grid = Array(repeating: row, count: height)
        let lines = grid.reduce("") { (soFar, nextRow) -> String in
            return soFar + nextRow.joined() + "\n"
        }
        let withoutLastNewLine = lines.dropLast()
        let stringWithoutLastNewLine = String(withoutLastNewLine)
        return stringWithoutLastNewLine
    }
    
    static func drawBlankGrid(width: Int, height: Int) {
        let grid = Day6.blankGrid(width: width, height: height)
        print(grid)
    }
    
    static func grid(width: Int, height: Int, points: [GridPoint]) -> String {
        var stringToReturn = ""
        
        for row in 0..<height {
            for column in 0...width {
                if column == width {
                    stringToReturn += "\n"
                    continue
                }
                
                let point = GridPoint(x: column, y: row)
                if let existingPoint = points.first(where: {$0 == point}), let id = existingPoint.id {
                    stringToReturn += id
                } else if point.equidistantFrom(points: points) {
                    stringToReturn += "."
                } else if let nearestPoint = point.nearestPoint(in: points), let nearId = nearestPoint.nearId {
                    stringToReturn += nearId
                } else {
                    stringToReturn += "."
                }
            }
        }
        
        return stringToReturn
    }
    
    static func rangeGrid(max: Int, width: Int, height: Int, points: [GridPoint]) -> (withPointIDs: String, withoutPointIDs: String) {
        var withPointIDs = ""
        var withoutPointIDs = ""
        
        for row in 0..<height {
            for column in 0...width {
                if column == width {
                    withPointIDs += "\n"
                    withoutPointIDs += "\n"
                    continue
                }
                
                let point = GridPoint(x: column, y: row)
                let inRange = point.within(range: max, of: points)
                
                if let existingPoint = points.first(where: {$0 == point}), let id = existingPoint.id {
                    withPointIDs += id
                } else if inRange {
                    withPointIDs += "#"
                } else {
                    withPointIDs += "."
                }
                
                if inRange {
                    withoutPointIDs += "#"
                } else {
                    withoutPointIDs += "."
                }
            }
        }
        
        return (withPointIDs, withoutPointIDs)
    }
    
    static func inRangeCount(grid: String) -> Int {
        let hashes = grid.filter { $0 == "#" }
        return hashes.count
    }
    
    static func drawGrid(width: Int, height: Int, points: [GridPoint]) {
        let grid = Day6.grid(width: width, height: height, points: points)
        print(grid)
    }
    
    static func nearestPoint(to point: GridPoint, from array: [GridPoint]) -> GridPoint? {
        let sortedPoints = array.sorted(by: { $0.distanceTo(point: point) < $1.distanceTo(point: point) })
        return sortedPoints.first
    }
    
    static func infiniteAndFinitePoints(in grid: String) -> (infinite: Set<Character>, finite: Set<Character>) {
        let disallowedCharacters = Set(arrayLiteral: Character("\n"), Character("."))
        var infiniteSet = Set<Character>()
        
        let split = grid.split(separator: "\n")
        
        if let firstLine = split.first {
            for character in firstLine {
                if infiniteSet.contains(character) == false {
                    infiniteSet.insert(character)
                }
            }
        }
        
        for line in split {
            if let firstLetter = line.first {
                if infiniteSet.contains(firstLetter) == false {
                    infiniteSet.insert(firstLetter)
                }
            }
            if let lastLetter = line.last {
                if infiniteSet.contains(lastLetter) == false {
                    infiniteSet.insert(lastLetter)
                }
            }
        }
        
        if let lastLine = split.last {
            for character in lastLine {
                if infiniteSet.contains(character) == false {
                    infiniteSet.insert(character)
                }
            }
        }
        
        let infiniteArray               = Array(infiniteSet)
        let infiniteStringArray         = infiniteArray.map { String($0) }
        let infiniteUppercase           = infiniteStringArray.map { $0.uppercased() }
        let infiniteUppercaseCharacters = infiniteUppercase.map { Character($0) }
        let infiniteUppercaseSet        = Set(infiniteUppercaseCharacters)
        
        let uppercaseGrid = grid.uppercased()
        let gridSet       = Set(uppercaseGrid)
        let finite        = gridSet.subtracting(infiniteUppercaseSet)
        
        let infiniteWithoutDisallowed = infiniteUppercaseSet.subtracting(disallowedCharacters)
        let finiteWithoutDisallowed   = finite.subtracting(disallowedCharacters)
        
        return (infiniteWithoutDisallowed, finiteWithoutDisallowed)
    }
    
    static func areaOf(point: Character, in grid: String) -> Int {
        let characters = grid.filter { character in
            let string = String(character)
            
            let uppercase = string.uppercased()
            let lowercase = string.lowercased()
            
            let uppercaseCharacter = Character(uppercase)
            let lowercaseCharacter = Character(lowercase)
            
            return point == uppercaseCharacter || point == lowercaseCharacter
        }
        
        return characters.count
    }
    
    static func maxFiniteArea(of grid: String) -> (point: Character, area: Int)? {
        let finitePoints = Day6.infiniteAndFinitePoints(in: grid).finite
        
        let areas = finitePoints.map { (point: $0, area: Day6.areaOf(point: $0, in: grid)) }
        let sortedAreas = areas.sorted { $0.area > $1.area }
        
        return sortedAreas.first
    }
    
    enum Day6Error: Swift.Error {
        case notEnoughIds(need: Int)
    }
    
    static func gridpoints(from: String) throws -> [GridPoint] {
        let split = from.split(separator: "\n")
        
        var pointsToReturn: [GridPoint] = []
        
        for (index, line) in split.enumerated() {
            if let id = day6IDs[safe: index] {
                let newPoint = try GridPoint(xAndY: String(line), id: id)
                pointsToReturn += [newPoint]
            } else {
                throw Day6Error.notEnoughIds(need: split.count)
            }
        }
        
        return pointsToReturn
    }
}

let day6Input = """
350, 353
238, 298
248, 152
168, 189
127, 155
339, 202
304, 104
317, 144
83, 106
78, 106
170, 230
115, 194
350, 272
159, 69
197, 197
190, 288
227, 215
228, 124
131, 238
154, 323
54, 185
133, 75
242, 184
113, 273
65, 245
221, 66
148, 82
131, 351
97, 272
72, 93
203, 116
209, 295
133, 115
355, 304
298, 312
251, 58
81, 244
138, 115
302, 341
286, 103
111, 95
148, 194
235, 262
41, 129
270, 275
234, 117
273, 257
98, 196
176, 122
121, 258
"""

//day6Input.split(separator: "\n").count // 50

func day6_part1() {
    do {
        let points = try Day6.gridpoints(from: day6Input)
        let grid = Day6.grid(width: 400, height: 400, points: points)
        print(Day6.maxFiniteArea(of: grid)) // (point: "T", area: 3010) Correct! (36.5s on work Mac Mini)
    } catch {
        print(error)
    }
}

//day6_part1()

func day6_part2() {
    do {
        let examplePointsFromString = try Day6.gridpoints(from: day6Input)
        let rangeGrid = Day6.rangeGrid(max: 9_999, width: 400, height: 400, points: examplePointsFromString)
        let rangeCount = Day6.inRangeCount(grid: rangeGrid.withoutPointIDs)
        print(rangeCount) // 48034 Correct! (4.2s on work Mac Mini)
    } catch {
        print(error)
    }
}

//day6_part2()

struct Day9Player {
    let id: Int
    //    var marbles: [Int]
    var scoredMarbles: [Int] = []
    
    var score: Int {
        return scoredMarbles.reduce(0, +)
    }
    
    // This is required due to the properties being a mix of default and non-default
    init(id: Int) {
        self.id = id
    }
    
    /*
     init(id: Int, marbleCount: Int, playerCount: Int) {
     self.id = id
     self.marbles = stride(from: id, through: marbleCount, by: playerCount).map { $0 }
     }
     */
}

enum Day9PlayerError: Swift.Error {
    case noPlayers
}

func highestScore(playerCount: Int, marbleCount: Int) throws -> Int {
    var marbleBag = [Int](0...marbleCount)
    var marbleArray = [marbleBag.remove(at: 0)]
    var currentMarbleIndex = 0
    /// Note that this is 1 indexed, not 0 indexed
    var currentPlayer = 1
    
    let seedArray = [Int](1...playerCount)
    var players = seedArray.map { Day9Player(id: $0) }
    
    while let _ = marbleBag.first {
        let thisMarble = marbleBag.remove(at: 0)
        if thisMarble % 23 == 0 {
            players[currentPlayer - 1].scoredMarbles += [thisMarble]
            
            let indexToRemove: Int = {
                var newIndex = currentMarbleIndex
                for _ in 1...7 {
                    newIndex -= 1
                    if newIndex < 0 {
                        newIndex = marbleArray.count - 1
                    }
                }
                return newIndex
            }()
            
            let winningMarble = marbleArray.remove(at: indexToRemove + 1)
            players[currentPlayer - 1].scoredMarbles += [winningMarble]
            
            let newMarbleIndex: Int = {
                var newIndex = indexToRemove + 1
                if newIndex >= marbleArray.count {
                    newIndex = 0
                }
                return newIndex
            }()
            
            currentMarbleIndex = newMarbleIndex - 1
        } else {
            let newMarbleIndex: Int = {
                var oldIndex = currentMarbleIndex
                for _ in 1...2 {
                    oldIndex += 1
                    if oldIndex >= marbleArray.count {
                        oldIndex = 0
                    }
                }
                return oldIndex
            }()
            
            marbleArray.insert(thisMarble, at: newMarbleIndex + 1)
            currentMarbleIndex = newMarbleIndex
        }
        
        currentPlayer += 1
        if currentPlayer > players.count {
            currentPlayer = 1
        }
        
        //        print(marbleArray) // This confirms that each stage matches the example
    }
    
    let playersByScore = players.sorted { $0.score > $1.score }
    
    guard let highestScoringPlayer = playersByScore.first else { throw Day9PlayerError.noPlayers }
    
    print(highestScoringPlayer)
    print(highestScoringPlayer.score)
    
    return highestScoringPlayer.score
    
}

func day9Part1() {
    do {
        //    let example0 = try highestScore(playerCount: 9, marbleCount: 25) // Correctly returning 32
        //    let example1 = try highestScore(playerCount: 10, marbleCount: 1618) // Correctly returning 8317
        //    let example2 = try highestScore(playerCount: 13, marbleCount: 7999) // Correctly returning 146373 (Player(id: 12, scoredMarbles: [207, 37, 506, 95, 805, 343, 1104, 475, 1403, 606, 1702, 737, 2001, 374, 2300, 988, 2599, 1121, 2898, 1252, 3197, 1383, 3496, 653, 3795, 130, 4094, 766, 4393, 1898, 4692, 2029, 4991, 932, 5290, 990, 5589, 450, 5888, 2544, 6187, 2675, 6486, 2802, 6785, 1269, 7084, 1323, 7383, 3190, 7682, 3321, 7981, 3452]))
        //    let example3 = try highestScore(playerCount: 17, marbleCount: 1104) // Correctly returning 2764 (Player(id: 16, scoredMarbles: [322, 140, 713, 10, 1104, 475]))
        //    let example4 = try highestScore(playerCount: 21, marbleCount: 6111) // Correctly returning 54718 (Player(id: 5, scoredMarbles: [299, 55, 782, 336, 1265, 101, 1748, 753, 2231, 962, 2714, 1170, 3197, 1383, 3680, 685, 4163, 1800, 4646, 866, 5129, 2217, 5612, 195, 6095, 2634]))
        //    let example5 = try highestScore(playerCount: 30, marbleCount: 5807) // Correctly returning 37305 (Player(id: 20, scoredMarbles: [230, 99, 920, 74, 1610, 696, 2300, 988, 2990, 1293, 3680, 685, 4370, 1890, 5060, 2183, 5750, 2487]))
            let part1 = try highestScore(playerCount: 416, marbleCount: 71617) // Returns 436720 (correct!) (Day9Player(id: 47, scoredMarbles: [4623, 1996, 14191, 6134, 23759, 10272, 33327, 14410, 42895, 18548, 52463, 22686, 62031, 26824, 71599, 30962]))
    } catch {
        print(error)
    }
}

//day9Part1()

func day9Part2() {
    do {
        let part2 = try highestScore(playerCount: 416, marbleCount: 7161700)
        
        /*
         Day9Player(id: 195, scoredMarbles: [2691, 1162, 12259, 5300, 21827, 9438, 31395, 13576, 40963, 17714, 50531, 21852, 60099, 25986, 69667, 13027, 79235, 14817, 88803, 16607, 98371, 7952, 107939, 8727, 117507, 9502, 127075, 23763, 136643, 4776, 146211, 5113, 155779, 67361, 165347, 71499, 174915, 75637, 184483, 79775, 194051, 83913, 203619, 88051, 213187, 92189, 222755, 96327, 232323, 100465, 241891, 8456, 251459, 8793, 261027, 48805, 270595, 50597, 280163, 52387, 289731, 54177, 299299, 129420, 308867, 133559, 318435, 137698, 328003, 141836, 337571, 145974, 347139, 150112, 356707, 154250, 366275, 158388, 375843, 162526, 385411, 166664, 394979, 170802, 404547, 174940, 414115, 179074, 423683, 79226, 433251, 81016, 442819, 82806, 452387, 84596, 461955, 37356, 471523, 7127, 481091, 89962, 490659, 91746, 500227, 93543, 509795, 220449, 519363, 224587, 528931, 228725, 538499, 232863, 548067, 237001, 557635, 241139, 567203, 245277, 576771, 249415, 586339, 253553, 595907, 111431, 605475, 48959, 615043, 49734, 624611, 50509, 634179, 9587, 643747, 120376, 653315, 282508, 662883, 286647, 672451, 290786, 682019, 294924, 691587, 299062, 701155, 303200, 710723, 307338, 720291, 311476, 729859, 315614, 739427, 319752, 748995, 323890, 758563, 328028, 768131, 332162, 777699, 27194, 787267, 147215, 796835, 149005, 806403, 150795, 815971, 152585, 825539, 28868, 835107, 156161, 844675, 29537, 854243, 159742, 863811, 373537, 873379, 377675, 882947, 381813, 892515, 385951, 902083, 390089, 911651, 394227, 921219, 398365, 930787, 402503, 940355, 406641, 949923, 177634, 959491, 179424, 969059, 78363, 978627, 34218, 988195, 34554, 997763, 186574, 1007331, 435596, 1016899, 439735, 1026467, 443874, 1036035, 448012, 1045603, 452150, 1055171, 456288, 1064739, 460426, 1074307, 464564, 1083875, 468702, 1093443, 472840, 1103011, 476978, 1112579, 481116, 1122147, 485250, 1131715, 211622, 1141283, 213414, 1150851, 215204, 1160419, 216994, 1169987, 218784, 1179555, 220574, 1189123, 41579, 1198691, 41915, 1208259, 225941, 1217827, 526625, 1227395, 530763, 1236963, 534901, 1246531, 539039, 1256099, 543177, 1265667, 547315, 1275235, 551453, 1284803, 555591, 1294371, 559729, 1303939, 243833, 1313507, 245623, 1323075, 247413, 1332643, 20152, 1342211, 8775, 1351779, 109308, 1361347, 588684, 1370915, 592823, 1380483, 596962, 1390051, 601100, 1399619, 605238, 1409187, 609376, 1418755, 613514, 1428323, 617652, 1437891, 621790, 1447459, 625928, 1457027, 630066, 1466595, 634204, 1476163, 638338, 1485731, 22464, 1495299, 52287, 1504867, 121687, 1514435, 283193, 1524003, 284983, 1533571, 286773, 1543139, 288557, 1552707, 290354, 1562275, 292140, 1571843, 679713, 1581411, 683851, 1590979, 687989, 1600547, 692127, 1610115, 696265, 1619683, 700403, 1629251, 704541, 1638819, 708679, 1648387, 712817, 1657955, 310032, 1667523, 311822, 1677091, 313612, 1686659, 315402, 1696227, 137162, 1705795, 137937, 1715363, 741772, 1724931, 745911, 1734499, 750050, 1744067, 754188, 1753635, 758326, 1763203, 762464, 1772771, 766602, 1782339, 770740, 1791907, 774878, 1801475, 779016, 1811043, 783154, 1820611, 787292, 1830179, 791426, 1839747, 148763, 1849315, 149540, 1858883, 150315, 1868451, 349391, 1878019, 351182, 1887587, 352972, 1897155, 153412, 1906723, 356553, 1916291, 358338, 1925859, 832801, 1935427, 836939, 1944995, 841077, 1954563, 845215, 1964131, 849353, 1973699, 853491, 1983267, 857629, 1992835, 861767, 2002403, 865905, 2011971, 376231, 2021539, 378021, 2031107, 379811, 2040675, 381601, 2050243, 383391, 2059811, 385177, 2069379, 894860, 2078947, 898999, 2088515, 903138, 2098083, 907276, 2107651, 911414, 2117219, 915552, 2126787, 919690, 2136355, 923828, 2145923, 927966, 2155491, 932104, 2165059, 936242, 2174627, 940380, 2184195, 944514, 2193763, 410230, 2203331, 178169, 2212899, 178944, 2222467, 77713, 2232035, 180490, 2241603, 181266, 2251171, 78718, 2260739, 422752, 2270307, 183587, 2279875, 985889, 2289443, 990027, 2299011, 994165, 2308579, 998303, 2318147, 1002441, 2327715, 1006579, 2337283, 1010717, 2346851, 1014855, 2356419, 1018993, 2365987, 191322, 2375555, 192098, 2385123, 446010, 2394691, 447800, 2404259, 449590, 2413827, 451380, 2423395, 1047948, 2432963, 1052087, 2442531, 1056226, 2452099, 1060364, 2461667, 1064502, 2471235, 1068640, 2480803, 1072778, 2490371, 1076916, 2499939, 1081054, 2509507, 1085192, 2519075, 1089330, 2528643, 1093468, 2538211, 1097602, 2547779, 476429, 2557347, 478219, 2566915, 89759, 2576483, 90095, 2586051, 39105, 2595619, 485368, 2605187, 487165, 2614755, 488951, 2624323, 91765, 2633891, 1138977, 2643459, 1143115, 2653027, 1147253, 2662595, 1151391, 2672163, 1155529, 2681731, 1159667, 2691299, 1163805, 2700867, 1167943, 2710435, 1172081, 2720003, 219951, 2729571, 95445, 2739139, 512208, 2748707, 513999, 2758275, 515789, 2767843, 517579, 2777411, 1201036, 2786979, 1205175, 2796547, 1209314, 2806115, 1213452, 2815683, 1217590, 2825251, 1221728, 2834819, 1225866, 2844387, 1230004, 2853955, 1234142, 2863523, 1238280, 2873091, 1242418, 2882659, 1246556, 2892227, 1250690, 2901795, 542628, 2911363, 544418, 2920931, 546208, 2930499, 547994, 2940067, 237743, 2949635, 238518, 2959203, 553364, 2968771, 555149, 2978339, 556941, 2987907, 1292065, 2997475, 1296203, 3007043, 1300341, 3016611, 1304479, 3026179, 1308617, 3035747, 1312755, 3045315, 1316893, 3054883, 1321031, 3064451, 1325169, 3074019, 46480, 3083587, 107822, 3093155, 8746, 3102723, 108490, 3112291, 8799, 3121859, 583778, 3131427, 1354124, 3140995, 1358263, 3150563, 1362402, 3160131, 1366540, 3169699, 1370678, 3179267, 1374816, 3188835, 1378954, 3198403, 1383092, 3207971, 1387230, 3217539, 1391368, 3227107, 1395506, 3236675, 1399644, 3246243, 1403778, 3255811, 608827, 3265379, 610617, 3274947, 612407, 3284515, 614197, 3294083, 615987, 3303651, 267147, 3313219, 619563, 3322787, 268693, 3332355, 623144, 3341923, 1445153, 3351491, 1449291, 3361059, 1453429, 3370627, 1457567, 3380195, 1461705, 3389763, 1465843, 3399331, 1469981, 3408899, 1474119, 3418467, 1478257, 3428035, 641036, 3437603, 277975, 3447171, 278750, 3456739, 279525, 3466307, 648185, 3475875, 649977, 3485443, 1507212, 3495011, 1511351, 3504579, 1515490, 3514147, 1519628, 3523715, 1523766, 3533283, 1527904, 3542851, 1532042, 3552419, 1536180, 3561987, 1540318, 3571555, 1544456, 3581123, 1548594, 3590691, 1552732, 3600259, 1556866, 3609827, 675025, 3619395, 676816, 3628963, 678606, 3638531, 680396, 3648099, 682186, 3657667, 683976, 3667235, 685762, 3676803, 297322, 3686371, 689343, 3695939, 1598241, 3705507, 1602379, 3715075, 1606517, 3724643, 1610655, 3734211, 1614793, 3743779, 1618931, 3753347, 1623069, 3762915, 1627207, 3772483, 1631345, 3782051, 707235, 3791619, 709025, 3801187, 710811, 3810755, 308150, 3820323, 133583, 3829891, 4682, 3839459, 1660300, 3849027, 1664439, 3858595, 1668578, 3868163, 1672716, 3877731, 1676854, 3887299, 1680992, 3896867, 1685130, 3906435, 1689268, 3916003, 1693406, 3925571, 1697544, 3935139, 1701682, 3944707, 1705820, 3954275, 1709954, 3963843, 320532, 3973411, 321303, 3982979, 322079, 3992547, 746595, 4002115, 748385, 4011683, 750175, 4021251, 751960, 4030819, 753752, 4040387, 755542, 4049955, 1751329, 4059523, 1755467, 4069091, 1759605, 4078659, 1763743, 4088227, 1767881, 4097795, 1772019, 4107363, 1776157, 4116931, 1780295, 4126499, 1784433, 4136067, 773434, 4145635, 775224, 4155203, 777014, 4164771, 778804, 4174339, 337547, 4183907, 338324, 4193475, 1813388, 4203043, 1817527, 4212611, 1821666, 4222179, 1825804, 4231747, 1829942, 4241315, 1834080, 4250883, 1838218, 4260451, 1842356, 4270019, 1846494, 4279587, 1850632, 4289155, 1854770, 4298723, 1858908, 4308291, 1863042, 4317859, 150986, 4327427, 151322, 4336995, 811002, 4346563, 812794, 4356131, 814584, 4365699, 816374, 4375267, 353799, 4384835, 819955, 4394403, 821741, 4403971, 1904417, 4413539, 1908555, 4423107, 1912693, 4432675, 1916831, 4442243, 1920969, 4451811, 1925107, 4461379, 1929245, 4470947, 1933383, 4480515, 1937521, 4490083, 839633, 4499651, 841423, 4509219, 843213, 4518787, 845003, 4528355, 846793, 4537923, 366953, 4547491, 1966476, 4557059, 1970615, 4566627, 1974754, 4576195, 1978892, 4585763, 1983030, 4595331, 1987168, 4604899, 1991306, 4614467, 1995444, 4624035, 1999582, 4633603, 2003720, 4643171, 2007858, 4652739, 2011996, 4662307, 2016130, 4671875, 873628, 4681443, 378555, 4691011, 379331, 4700579, 380106, 4710147, 380882, 4719715, 882573, 4729283, 382428, 4738851, 886154, 4748419, 383974, 4757987, 2057505, 4767555, 2061643, 4777123, 2065781, 4786691, 2069919, 4796259, 2074057, 4805827, 2078195, 4815395, 2082333, 4824963, 2086471, 4834531, 2090609, 4844099, 391714, 4853667, 169724, 4863235, 909412, 4872803, 911202, 4882371, 912992, 4891939, 914782, 4901507, 2119564, 4911075, 2123703, 4920643, 2127842, 4930211, 2131980, 4939779, 2136118, 4949347, 2140256, 4958915, 2144394, 4968483, 2148532, 4978051, 2152670, 4987619, 2156808, 4997187, 2160946, 5006755, 2165084, 5016323, 2169218, 5025891, 939831, 5035459, 941621, 5045027, 407960, 5054595, 408735, 5064163, 177084, 5073731, 948771, 5083299, 950563, 5092867, 952353, 5102435, 412603, 5112003, 2210593, 5121571, 2214731, 5131139, 2218869, 5140707, 2223007, 5150275, 2227145, 5159843, 2231283, 5169411, 2235421, 5178979, 2239559, 5188547, 2243697, 5198115, 420338, 5207683, 973819, 5217251, 975611, 5226819, 977401, 5236387, 979191, 5245955, 980981, 5255523, 2272652, 5265091, 2276791, 5274659, 2280930, 5284227, 2285068, 5293795, 2289206, 5303363, 2293344, 5312931, 2297482, 5322499, 2301620, 5332067, 2305758, 5341635, 2309896, 5351203, 2314034, 5360771, 2318172, 5370339, 2322306, 5379907, 1006030, 5389475, 1007820, 5399043, 1009610, 5408611, 189126, 5418179, 189462, 5427747, 189794, 5437315, 1016766, 5446883, 1018552, 5456451, 441228, 5466019, 2363681, 5475587, 2367819, 5485155, 2371957, 5494723, 2376095, 5504291, 2380233, 5513859, 2384371, 5523427, 2388509, 5532995, 2392647, 5542563, 2396785, 5552131, 448967, 5561699, 449738, 5571267, 84242, 5580835, 451282, 5590403, 1045390, 5599971, 1047180, 5609539, 2425740, 5619107, 2429879, 5628675, 2434018, 5638243, 2438156, 5647811, 2442294, 5657379, 2446432, 5666947, 2450570, 5676515, 2454708, 5686083, 2458846, 5695651, 2462984, 5705219, 2467122, 5714787, 2471260, 5724355, 2475394, 5733923, 1072229, 5743491, 1074019, 5753059, 1075809, 5762627, 1077599, 5772195, 466759, 5781763, 467534, 5791331, 1082965, 5800899, 469080, 5810467, 1086546, 5820035, 2516769, 5829603, 2520907, 5839171, 2525045, 5848739, 2529183, 5858307, 2533321, 5867875, 2537459, 5877443, 2541597, 5887011, 2545735, 5896579, 2549873, 5906147, 1104438, 5915715, 206863, 5925283, 479135, 5934851, 479912, 5944419, 1111588, 5953987, 1113379, 5963555, 2578828, 5973123, 2582967, 5982691, 2587106, 5992259, 2591244, 6001827, 2595382, 6011395, 2599520, 6020963, 2603658, 6030531, 2607796, 6040099, 2611934, 6049667, 2616072, 6059235, 2620210, 6068803, 2624348, 6078371, 2628482, 6087939, 1138428, 6097507, 1140218, 6107075, 1142008, 6116643, 1143798, 6126211, 1145588, 6135779, 1147374, 6145347, 1149164, 6154915, 497709, 6164483, 1152745, 6174051, 2669857, 6183619, 2673995, 6193187, 2678133, 6202755, 2682271, 6212323, 2686409, 6221891, 2690547, 6231459, 2694685, 6241027, 2698823, 6250595, 2702961, 6260163, 1170637, 6269731, 1172427, 6279299, 507766, 6288867, 508541, 6298435, 509316, 6308003, 510087, 6317571, 2731916, 6327139, 2736055, 6336707, 2740194, 6346275, 2744332, 6355843, 2748470, 6365411, 2752608, 6374979, 2756746, 6384547, 2760884, 6394115, 2765022, 6403683, 2769160, 6413251, 2773298, 6422819, 2777436, 6432387, 2781570, 6441955, 520919, 6451523, 521695, 6461091, 1208207, 6470659, 1209997, 6480227, 1211787, 6489795, 1213577, 6499363, 1215363, 6508931, 526338, 6518499, 1218944, 6528067, 2822945, 6537635, 2827083, 6547203, 2831221, 6556771, 2835359, 6566339, 2839497, 6575907, 2843635, 6585475, 2847773, 6595043, 2851911, 6604611, 2856049, 6614179, 1236836, 6623747, 1238626, 6633315, 1240416, 6642883, 537170, 6652451, 232625, 6662019, 100736, 6671587, 2885004, 6681155, 2889143, 6690723, 2893282, 6700291, 2897420, 6709859, 2901558, 6719427, 2905696, 6728995, 2909834, 6738563, 2913972, 6748131, 2918110, 6757699, 2922248, 6767267, 2926386, 6776835, 2930524, 6786403, 2934658, 6795971, 549548, 6805539, 550323, 6815107, 1274405, 6824675, 1276196, 6834243, 1277986, 6843811, 1279776, 6853379, 554184, 6862947, 1283357, 6872515, 1285143, 6882083, 2976033, 6891651, 2980171, 6901219, 2984309, 6910787, 2988447, 6920355, 2992585, 6929923, 2996723, 6939491, 3000861, 6949059, 3004999, 6958627, 3009137, 6968195, 1303035, 6977763, 1304825, 6987331, 1306615, 6996899, 1308405, 7006467, 1310191, 7016035, 567339, 7025603, 3038092, 7035171, 3042231, 7044739, 3046370, 7054307, 3050508, 7063875, 3054646, 7073443, 3058784, 7083011, 3062922, 7092579, 3067060, 7102147, 3071198, 7111715, 3075336, 7121283, 3079474, 7130851, 3083612, 7140419, 3087746, 7149987, 578177, 7159555, 20245])
         
         3527845091 // Correct!
         
         On work Mac Mini:
         Took: 51954.15557193756 seconds
         (865.9 minutes)
         (14.4 hours)
         */
    } catch {
        print(error)
    }
}

//day9Part2()

import CoreGraphics

struct Point {
    let position: CGPoint
    let velocity: CGPoint
    
    enum PointError: Swift.Error {
        case wrongInitStringCount(actualCount: Int)
        case isNotInt(string: String)
        case emptyArray
    }
    
    init(position: CGPoint, velocity: CGPoint) {
        self.position = position
        self.velocity = velocity
    }
    
    init(string: String) throws {
        let splitString = string.split { (character) -> Bool in
            if character == "<" {
                return true
            } else if character == " " {
                return true
            } else if character == "," {
                return true
            } else if character == ">" {
                return true
            } else {
                return false
            }
        }
        
        let splitStringCount = splitString.count
        guard splitStringCount == 6 else { throw PointError.wrongInitStringCount(actualCount: splitStringCount) }
        
        let array = [splitString[1], splitString[2], splitString[4], splitString[5]]
        let intArray = try array.map { substring -> Int in
            guard let int = Int(substring) else { throw PointError.isNotInt(string: String(substring)) }
            return int
        }
        
        self.position = CGPoint(x: intArray[0], y: intArray[1])
        self.velocity = CGPoint(x: intArray[2], y: intArray[3])
    }
    
    var asInputString: String {
        let positionXInt = Int(position.x)
        let positionYInt = Int(position.y)
        let velocityXInt = Int(velocity.x)
        let velocityYInt = Int(velocity.y)
        
        return "position=<\(positionXInt),\(positionYInt)> velocity=<\(velocityXInt),\(velocityYInt)>"
    }
    
    public static func pointArray(from: String) throws -> [Point] {
        let splitArray = from.split(separator: "\n")
        let pointArray = try splitArray.map { try Point(string: String($0)) }
        return pointArray
    }
    
    public static func gridSize(from points: [Point]) throws -> CGRect {
        let sortedByX = points.sorted { $0.position.x < $1.position.x }
        let sortedByY = points.sorted { $0.position.y < $1.position.y }
        
        guard
            let firstX = sortedByX.first,
            let lastX = sortedByX.last,
            let firstY = sortedByY.first,
            let lastY = sortedByY.last
            else { throw PointError.emptyArray }
        
        let floatX = firstX.position.x
        let x = Int(floatX)
        
        let floatY = firstY.position.y
        let y = Int(floatY)
        
        let floatWidth = lastX.position.x - firstX.position.x
        let width = Int(floatWidth)
        
        let floatHeight = lastY.position.y - firstY.position.y
        let height = Int(floatHeight)
        
        return CGRect(x: x, y: y, width: width, height: height)
    }
    
    public static func grid(from points: [Point], pointCharacter: Character = "#", blankCharacter: Character = ".") throws -> String {
        let rect = try Point.gridSize(from: points)
        
        let minX = Int(rect.minX)
        let maxX = Int(rect.maxX)
        let minY = Int(rect.minY)
        let maxY = Int(rect.maxY)
        
        var stringToReturn = ""
        
        for y in minY...maxY {
            for x in minX...maxX {
                let cgX = CGFloat(x)
                let cgY = CGFloat(y)
                
                if points.contains(where: { (point) -> Bool in
                    return point.position.x == cgX && point.position.y == cgY
                }) {
                    stringToReturn.append(pointCharacter)
                } else {
                    stringToReturn.append(blankCharacter)
                }
                
                if x == maxX {
                    stringToReturn += "\n"
                }
            }
        }
        
        return stringToReturn
    }
    
    public static func grid(from string: String) throws -> String {
        let points = try Point.pointArray(from: string)
        return try Point.grid(from: points)
    }
    
    public static func nextGeneration(from points: [Point]) -> [Point] {
        return points.map { (point) -> Point in
            let newXPosition = point.position.x + point.velocity.x
            let newYPosition = point.position.y + point.velocity.y
            let newPosition = CGPoint(x: newXPosition, y: newYPosition)
            return Point(position: newPosition, velocity: point.velocity)
        }
    }
}

let day10Part1Input = """
position=< 53777,  21594> velocity=<-5, -2>
position=< 53761,  53776> velocity=<-5, -5>
position=<-32066,  53779> velocity=< 3, -5>
position=<-21287,  43043> velocity=< 2, -4>
position=< 10848, -42773> velocity=<-1,  4>
position=<-10596,  53770> velocity=< 1, -5>
position=<-42798,  53772> velocity=< 4, -5>
position=<-21308, -32037> velocity=< 2,  3>
position=<-21332,  10863> velocity=< 2, -1>
position=<-10596, -21313> velocity=< 1,  2>
position=<-42750, -53498> velocity=< 4,  5>
position=<-10569, -21315> velocity=< 1,  2>
position=<-21334,  53779> velocity=< 2, -5>
position=< 43055, -10586> velocity=<-4,  1>
position=< 21588, -21313> velocity=<-2,  2>
position=< 53795,  32316> velocity=<-5, -3>
position=< 43061, -21319> velocity=<-4,  2>
position=<-10590, -21317> velocity=< 1,  2>
position=<-21344, -32042> velocity=< 2,  3>
position=<-53491, -42769> velocity=< 5,  4>
position=< 53801,  21595> velocity=<-5, -2>
position=< 43055, -42771> velocity=<-4,  4>
position=<-32027, -21319> velocity=< 3,  2>
position=< 43068,  21598> velocity=<-4, -2>
position=< 32307, -53499> velocity=<-3,  5>
position=< 53787, -53491> velocity=<-5,  5>
position=<-21288,  53778> velocity=< 2, -5>
position=<-42787,  10862> velocity=< 4, -1>
position=<-53522,  32325> velocity=< 5, -3>
position=<-53513,  21595> velocity=< 5, -2>
position=<-42741, -32042> velocity=< 4,  3>
position=< 43022, -53495> velocity=<-4,  5>
position=< 43076,  21593> velocity=<-4, -2>
position=< 53757, -10589> velocity=<-5,  1>
position=<-32035,  43047> velocity=< 3, -4>
position=< 32328, -42768> velocity=<-3,  4>
position=< 21608, -53500> velocity=<-2,  5>
position=< 53790, -21318> velocity=<-5,  2>
position=<-10561, -32038> velocity=< 1,  3>
position=<-32068, -42768> velocity=< 3,  4>
position=< 10861, -10587> velocity=<-1,  1>
position=< 43068,  53779> velocity=<-4, -5>
position=< 21568, -10592> velocity=<-2,  1>
position=<-42766, -10584> velocity=< 4,  1>
position=<-53469, -10585> velocity=< 5,  1>
position=< 21564,  32322> velocity=<-2, -3>
position=<-42762, -32037> velocity=< 4,  3>
position=< 21576, -10587> velocity=<-2,  1>
position=<-10567,  53774> velocity=< 1, -5>
position=<-21283,  21589> velocity=< 2, -2>
position=<-32022, -32042> velocity=< 3,  3>
position=<-21309,  10871> velocity=< 2, -1>
position=< 53778,  53774> velocity=<-5, -5>
position=<-53493, -21317> velocity=< 5,  2>
position=< 43023, -42766> velocity=<-4,  4>
position=< 43030, -42768> velocity=<-4,  4>
position=< 10853,  21597> velocity=<-1, -2>
position=< 21584,  53778> velocity=<-2, -5>
position=<-53492,  53770> velocity=< 5, -5>
position=<-21309, -10592> velocity=< 2,  1>
position=<-10573, -53497> velocity=< 1,  5>
position=<-53513, -10592> velocity=< 5,  1>
position=<-42750, -42768> velocity=< 4,  4>
position=< 21589,  32321> velocity=<-2, -3>
position=< 43042,  21594> velocity=<-4, -2>
position=< 32308, -10590> velocity=<-3,  1>
position=<-32055, -21315> velocity=< 3,  2>
position=<-21318, -42767> velocity=< 2,  4>
position=<-53501,  10864> velocity=< 5, -1>
position=<-53474, -53496> velocity=< 5,  5>
position=<-53513, -21318> velocity=< 5,  2>
position=<-10617, -21318> velocity=< 1,  2>
position=< 10869, -42770> velocity=<-1,  4>
position=< 43034, -21318> velocity=<-4,  2>
position=< 53785,  21597> velocity=<-5, -2>
position=<-32070, -53491> velocity=< 3,  5>
position=<-42771, -32039> velocity=< 4,  3>
position=<-42786, -32045> velocity=< 4,  3>
position=<-10597,  53777> velocity=< 1, -5>
position=<-32023, -32042> velocity=< 3,  3>
position=< 53787, -10592> velocity=<-5,  1>
position=<-21318,  53776> velocity=< 2, -5>
position=<-10585, -53499> velocity=< 1,  5>
position=< 32315,  32323> velocity=<-3, -3>
position=< 53794, -53496> velocity=<-5,  5>
position=< 10864, -42766> velocity=<-1,  4>
position=<-32055, -42770> velocity=< 3,  4>
position=<-53467,  53770> velocity=< 5, -5>
position=< 32295,  53770> velocity=<-3, -5>
position=< 32291, -32038> velocity=<-3,  3>
position=<-32053,  21593> velocity=< 3, -2>
position=< 10888,  43047> velocity=<-1, -4>
position=< 53777,  53776> velocity=<-5, -5>
position=< 43070,  43052> velocity=<-4, -4>
position=<-53509,  53775> velocity=< 5, -5>
position=< 43047, -21310> velocity=<-4,  2>
position=< 10896,  53774> velocity=<-1, -5>
position=< 10861,  32320> velocity=<-1, -3>
position=< 21601,  43050> velocity=<-2, -4>
position=< 53749, -21314> velocity=<-5,  2>
position=<-10566,  43043> velocity=< 1, -4>
position=< 53747, -32037> velocity=<-5,  3>
position=< 21593, -42773> velocity=<-2,  4>
position=<-42782,  21598> velocity=< 4, -2>
position=<-21299, -10592> velocity=< 2,  1>
position=<-42766, -10592> velocity=< 4,  1>
position=< 43022, -21311> velocity=<-4,  2>
position=< 53801, -21314> velocity=<-5,  2>
position=<-42742,  53779> velocity=< 4, -5>
position=< 43042,  10862> velocity=<-4, -1>
position=<-32066,  32322> velocity=< 3, -3>
position=< 53746,  10871> velocity=<-5, -1>
position=< 43038,  43050> velocity=<-4, -4>
position=< 32349, -10588> velocity=<-3,  1>
position=< 10858,  53778> velocity=<-1, -5>
position=< 32304, -42773> velocity=<-3,  4>
position=< 43042, -53499> velocity=<-4,  5>
position=< 43035,  10864> velocity=<-4, -1>
position=<-32021,  21593> velocity=< 3, -2>
position=<-53501, -53494> velocity=< 5,  5>
position=< 43074,  32325> velocity=<-4, -3>
position=< 21620, -53499> velocity=<-2,  5>
position=<-21320,  32322> velocity=< 2, -3>
position=< 43050,  53779> velocity=<-4, -5>
position=<-10601, -32045> velocity=< 1,  3>
position=< 21608, -21310> velocity=<-2,  2>
position=<-42794, -10592> velocity=< 4,  1>
position=< 53750,  10863> velocity=<-5, -1>
position=<-21341, -53500> velocity=< 2,  5>
position=< 32348,  10871> velocity=<-3, -1>
position=< 32307, -21316> velocity=<-3,  2>
position=<-32019, -32042> velocity=< 3,  3>
position=< 53774, -32046> velocity=<-5,  3>
position=<-21286, -42764> velocity=< 2,  4>
position=<-10615,  21598> velocity=< 1, -2>
position=< 21604,  32316> velocity=<-2, -3>
position=< 32312, -53491> velocity=<-3,  5>
position=<-21339, -42764> velocity=< 2,  4>
position=<-42766,  43047> velocity=< 4, -4>
position=< 10888, -32037> velocity=<-1,  3>
position=< 53754,  21598> velocity=<-5, -2>
position=< 21576,  32320> velocity=<-2, -3>
position=< 21580, -21317> velocity=<-2,  2>
position=< 53750, -32041> velocity=<-5,  3>
position=<-21323, -53495> velocity=< 2,  5>
position=< 43066,  21592> velocity=<-4, -2>
position=< 10840, -32046> velocity=<-1,  3>
position=< 32343,  53774> velocity=<-3, -5>
position=<-10564,  53779> velocity=< 1, -5>
position=< 21590, -32043> velocity=<-2,  3>
position=< 21612,  43046> velocity=<-2, -4>
position=< 21576, -21312> velocity=<-2,  2>
position=< 53777, -32044> velocity=<-5,  3>
position=<-53493,  10863> velocity=< 5, -1>
position=< 32332,  10871> velocity=<-3, -1>
position=< 10880,  53774> velocity=<-1, -5>
position=<-53482,  32320> velocity=< 5, -3>
position=< 10889,  10862> velocity=<-1, -1>
position=<-10558, -32037> velocity=< 1,  3>
position=<-21304,  10870> velocity=< 2, -1>
position=<-32034,  21590> velocity=< 3, -2>
position=<-32039, -42770> velocity=< 3,  4>
position=< 53770,  53775> velocity=<-5, -5>
position=< 32332,  21595> velocity=<-3, -2>
position=< 32349,  53770> velocity=<-3, -5>
position=< 10886, -53496> velocity=<-1,  5>
position=<-32070,  21589> velocity=< 3, -2>
position=< 21606,  10871> velocity=<-2, -1>
position=<-42750, -53492> velocity=< 4,  5>
position=< 53772,  10869> velocity=<-5, -1>
position=<-42753,  43045> velocity=< 4, -4>
position=<-21316, -53499> velocity=< 2,  5>
position=<-32066, -53492> velocity=< 3,  5>
position=<-53509,  32319> velocity=< 5, -3>
position=<-42774, -42764> velocity=< 4,  4>
position=< 32318, -42771> velocity=<-3,  4>
position=<-21302,  53775> velocity=< 2, -5>
position=< 32349, -42764> velocity=<-3,  4>
position=< 10893, -32039> velocity=<-1,  3>
position=< 43022,  21597> velocity=<-4, -2>
position=< 43062, -10583> velocity=<-4,  1>
position=<-32066,  10870> velocity=< 3, -1>
position=< 10848, -42764> velocity=<-1,  4>
position=< 32325,  10866> velocity=<-3, -1>
position=<-53514,  53779> velocity=< 5, -5>
position=<-21317,  21591> velocity=< 2, -2>
position=<-53476, -32037> velocity=< 5,  3>
position=<-10617,  43046> velocity=< 1, -4>
position=<-42795,  53779> velocity=< 4, -5>
position=< 53758, -10592> velocity=<-5,  1>
position=<-10615, -53500> velocity=< 1,  5>
position=< 21620,  10867> velocity=<-2, -1>
position=< 10874, -42771> velocity=<-1,  4>
position=< 32315,  53778> velocity=<-3, -5>
position=<-53490, -32042> velocity=< 5,  3>
position=< 21596,  10869> velocity=<-2, -1>
position=<-32027, -10589> velocity=< 3,  1>
position=< 53782,  53778> velocity=<-5, -5>
position=<-53469,  10862> velocity=< 5, -1>
position=<-32068,  43052> velocity=< 3, -4>
position=< 32339, -53500> velocity=<-3,  5>
position=< 21624, -42764> velocity=<-2,  4>
position=< 43039,  53771> velocity=<-4, -5>
position=< 32307, -32046> velocity=<-3,  3>
position=<-53469,  10864> velocity=< 5, -1>
position=< 32323, -53491> velocity=<-3,  5>
position=< 32324, -10592> velocity=<-3,  1>
position=< 21584,  21596> velocity=<-2, -2>
position=<-42741,  32320> velocity=< 4, -3>
position=<-32066,  32317> velocity=< 3, -3>
position=< 10849,  32323> velocity=<-1, -3>
position=< 53778, -21310> velocity=<-5,  2>
position=<-10569,  10868> velocity=< 1, -1>
position=< 21607, -42764> velocity=<-2,  4>
position=< 32325, -53500> velocity=<-3,  5>
position=<-42742, -42770> velocity=< 4,  4>
position=< 21614,  21598> velocity=<-2, -2>
position=< 21596,  53771> velocity=<-2, -5>
position=< 10849, -10592> velocity=<-1,  1>
position=<-32039,  53775> velocity=< 3, -5>
position=< 43047, -21319> velocity=<-4,  2>
position=<-10583,  53779> velocity=< 1, -5>
position=<-21332,  43046> velocity=< 2, -4>
position=< 21566,  43052> velocity=<-2, -4>
position=< 53785, -21310> velocity=<-5,  2>
position=< 32303, -21319> velocity=<-3,  2>
position=< 43070, -21310> velocity=<-4,  2>
position=< 43062,  21589> velocity=<-4, -2>
position=<-53469, -42773> velocity=< 5,  4>
position=< 43070,  43052> velocity=<-4, -4>
position=<-42794,  43048> velocity=< 4, -4>
position=<-10582,  32316> velocity=< 1, -3>
position=< 21585,  32320> velocity=<-2, -3>
position=< 21585, -10591> velocity=<-2,  1>
position=< 32312,  32322> velocity=<-3, -3>
position=< 43036, -53497> velocity=<-4,  5>
position=<-42770,  43044> velocity=< 4, -4>
position=<-10569, -42772> velocity=< 1,  4>
position=< 21621, -53500> velocity=<-2,  5>
position=< 53777,  32322> velocity=<-5, -3>
position=<-10591,  43049> velocity=< 1, -4>
position=< 43037, -42768> velocity=<-4,  4>
position=<-53505, -53492> velocity=< 5,  5>
position=< 32296, -53495> velocity=<-3,  5>
position=< 21585, -53493> velocity=<-2,  5>
position=< 21600, -42769> velocity=<-2,  4>
position=< 53797, -53496> velocity=<-5,  5>
position=< 10885,  10865> velocity=<-1, -1>
position=<-42766, -21314> velocity=< 4,  2>
position=< 32304,  53770> velocity=<-3, -5>
position=< 21564, -53497> velocity=<-2,  5>
position=< 21621,  32325> velocity=<-2, -3>
position=< 10838,  53770> velocity=<-1, -5>
position=< 21598,  43052> velocity=<-2, -4>
position=< 53785, -32037> velocity=<-5,  3>
position=< 53806,  10871> velocity=<-5, -1>
position=<-21285, -21315> velocity=< 2,  2>
position=<-42761,  10870> velocity=< 4, -1>
position=<-42748, -42773> velocity=< 4,  4>
position=< 21600, -32046> velocity=<-2,  3>
position=<-32063,  21596> velocity=< 3, -2>
position=<-42782, -21317> velocity=< 4,  2>
position=< 32323,  53779> velocity=<-3, -5>
position=<-21328,  10866> velocity=< 2, -1>
position=< 43076, -53491> velocity=<-4,  5>
position=<-53477, -32040> velocity=< 5,  3>
position=<-32055, -21312> velocity=< 3,  2>
position=< 53805,  32316> velocity=<-5, -3>
position=<-32038,  21593> velocity=< 3, -2>
position=<-42761, -42770> velocity=< 4,  4>
position=<-21303,  53770> velocity=< 2, -5>
position=< 53766, -42771> velocity=<-5,  4>
position=<-32066, -21318> velocity=< 3,  2>
position=<-21320, -53497> velocity=< 2,  5>
position=< 43039, -53497> velocity=<-4,  5>
position=<-10616, -42764> velocity=< 1,  4>
position=<-53477, -10585> velocity=< 5,  1>
position=<-32012,  32316> velocity=< 3, -3>
position=<-32047, -53500> velocity=< 3,  5>
position=<-32023,  32321> velocity=< 3, -3>
position=<-32059, -21311> velocity=< 3,  2>
position=< 21620,  53773> velocity=<-2, -5>
position=<-10589,  53778> velocity=< 1, -5>
position=< 10837,  32323> velocity=<-1, -3>
position=<-53505, -53492> velocity=< 5,  5>
position=<-53525,  10864> velocity=< 5, -1>
position=<-32047,  32323> velocity=< 3, -3>
position=< 21575, -53491> velocity=<-2,  5>
position=<-42738,  53774> velocity=< 4, -5>
position=<-32015, -21315> velocity=< 3,  2>
position=< 32307, -42771> velocity=<-3,  4>
position=< 43042,  10862> velocity=<-4, -1>
position=<-10580, -42767> velocity=< 1,  4>
position=< 10877,  43050> velocity=<-1, -4>
position=<-32052, -10586> velocity=< 3,  1>
position=< 10856,  21594> velocity=<-1, -2>
position=<-10572,  10864> velocity=< 1, -1>
position=< 10849,  21591> velocity=<-1, -2>
position=<-32045, -21316> velocity=< 3,  2>
position=<-53477,  43052> velocity=< 5, -4>
position=< 43055, -53494> velocity=<-4,  5>
position=< 10869, -53496> velocity=<-1,  5>
position=< 10865,  43051> velocity=<-1, -4>
position=< 10886, -10583> velocity=<-1,  1>
position=< 21585, -10588> velocity=<-2,  1>
position=<-42758, -42766> velocity=< 4,  4>
position=< 21607, -53491> velocity=<-2,  5>
position=<-32012,  53779> velocity=< 3, -5>
position=< 53782, -42768> velocity=<-5,  4>
position=< 10837,  43044> velocity=<-1, -4>
position=<-32066, -32038> velocity=< 3,  3>
position=<-53483,  10871> velocity=< 5, -1>
position=<-21299,  53779> velocity=< 2, -5>
position=< 53794,  53770> velocity=<-5, -5>
position=< 32316, -21315> velocity=<-3,  2>
position=< 32303,  10867> velocity=<-3, -1>
position=< 43068,  53774> velocity=<-4, -5>
position=< 32315, -53493> velocity=<-3,  5>
position=< 53782, -53497> velocity=<-5,  5>
position=< 32307,  32323> velocity=<-3, -3>
position=<-10617, -10590> velocity=< 1,  1>
position=<-21335,  10871> velocity=< 2, -1>
position=<-21336, -21311> velocity=< 2,  2>
position=< 43052,  43043> velocity=<-4, -4>
position=< 32327, -32042> velocity=<-3,  3>
position=< 43062, -53497> velocity=<-4,  5>
position=< 32294, -10592> velocity=<-3,  1>
position=< 10853,  53779> velocity=<-1, -5>
position=< 32339,  10866> velocity=<-3, -1>
position=<-53477, -21319> velocity=< 5,  2>
position=<-42765,  53774> velocity=< 4, -5>
position=<-53485,  32324> velocity=< 5, -3>
position=<-53469,  21589> velocity=< 5, -2>
position=<-32071, -32043> velocity=< 3,  3>
position=< 10881, -42764> velocity=<-1,  4>
position=<-21344,  10866> velocity=< 2, -1>
position=<-10564,  32316> velocity=< 1, -3>
position=< 32307,  10866> velocity=<-3, -1>
position=< 43039, -21318> velocity=<-4,  2>
position=< 32303, -32038> velocity=<-3,  3>
position=<-21320,  21594> velocity=< 2, -2>
position=<-10574, -42764> velocity=< 1,  4>
position=<-21332,  43045> velocity=< 2, -4>
position=<-21344, -10587> velocity=< 2,  1>
position=< 43030, -42767> velocity=<-4,  4>
position=<-53484, -21319> velocity=< 5,  2>
position=< 43058,  53777> velocity=<-4, -5>
position=<-21341,  32321> velocity=< 2, -3>
position=<-10583, -21319> velocity=< 1,  2>
position=<-32054, -10591> velocity=< 3,  1>
position=<-53491, -53496> velocity=< 5,  5>
position=<-42742,  43050> velocity=< 4, -4>
position=<-32026, -10583> velocity=< 3,  1>
position=< 10853,  21594> velocity=<-1, -2>
position=<-53483,  32321> velocity=< 5, -3>
position=<-21284, -21310> velocity=< 2,  2>
position=< 32323,  43051> velocity=<-3, -4>
position=< 32352,  53779> velocity=<-3, -5>
position=< 21612,  21594> velocity=<-2, -2>
position=< 32316,  43048> velocity=<-3, -4>
"""

func day10Part1() {
    do {
        var points = try Point.pointArray(from: day10Part1Input)
        for _ in 0...4 {
            print(try Point.grid(from: points, pointCharacter: "â", blankCharacter: " "))
            points = Point.nextGeneration(from: points)
        }
    } catch {
        print(error)
    }
}

//day10Part1() Even in main.swift this takes too long to run

let day10DebugPoints = """
position=<43767,17590> velocity=<-5,-2>
position=<43751,43766> velocity=<-5,-5>
position=<-26060,43769> velocity=<3,-5>
position=<-17283,35035> velocity=<2,-4>
position=<8846,-34765> velocity=<-1,4>
position=<-8594,43760> velocity=<1,-5>
position=<-34790,43762> velocity=<4,-5>
position=<-17304,-26031> velocity=<2,3>
position=<-17328,8861> velocity=<2,-1>
position=<-8594,-17309> velocity=<1,2>
position=<-34742,-43488> velocity=<4,5>
position=<-8567,-17311> velocity=<1,2>
position=<-17330,43769> velocity=<2,-5>
position=<35047,-8584> velocity=<-4,1>
position=<17584,-17309> velocity=<-2,2>
position=<43785,26310> velocity=<-5,-3>
position=<35053,-17315> velocity=<-4,2>
position=<-8588,-17313> velocity=<1,2>
position=<-17340,-26036> velocity=<2,3>
position=<-43481,-34761> velocity=<5,4>
position=<43791,17591> velocity=<-5,-2>
position=<35047,-34763> velocity=<-4,4>
position=<-26021,-17315> velocity=<3,2>
position=<35060,17594> velocity=<-4,-2>
position=<26301,-43489> velocity=<-3,5>
position=<43777,-43481> velocity=<-5,5>
position=<-17284,43768> velocity=<2,-5>
position=<-34779,8860> velocity=<4,-1>
position=<-43512,26319> velocity=<5,-3>
position=<-43503,17591> velocity=<5,-2>
position=<-34733,-26036> velocity=<4,3>
position=<35014,-43485> velocity=<-4,5>
position=<35068,17589> velocity=<-4,-2>
position=<43747,-8587> velocity=<-5,1>
position=<-26029,35039> velocity=<3,-4>
position=<26322,-34760> velocity=<-3,4>
position=<17604,-43490> velocity=<-2,5>
position=<43780,-17314> velocity=<-5,2>
position=<-8559,-26032> velocity=<1,3>
position=<-26062,-34760> velocity=<3,4>
position=<8859,-8585> velocity=<-1,1>
position=<35060,43769> velocity=<-4,-5>
position=<17564,-8590> velocity=<-2,1>
position=<-34758,-8582> velocity=<4,1>
position=<-43459,-8583> velocity=<5,1>
position=<17560,26316> velocity=<-2,-3>
position=<-34754,-26031> velocity=<4,3>
position=<17572,-8585> velocity=<-2,1>
position=<-8565,43764> velocity=<1,-5>
position=<-17279,17585> velocity=<2,-2>
position=<-26016,-26036> velocity=<3,3>
position=<-17305,8869> velocity=<2,-1>
position=<43768,43764> velocity=<-5,-5>
position=<-43483,-17313> velocity=<5,2>
position=<35015,-34758> velocity=<-4,4>
position=<35022,-34760> velocity=<-4,4>
position=<8851,17593> velocity=<-1,-2>
position=<17580,43768> velocity=<-2,-5>
position=<-43482,43760> velocity=<5,-5>
position=<-17305,-8590> velocity=<2,1>
position=<-8571,-43487> velocity=<1,5>
position=<-43503,-8590> velocity=<5,1>
position=<-34742,-34760> velocity=<4,4>
position=<17585,26315> velocity=<-2,-3>
position=<35034,17590> velocity=<-4,-2>
position=<26302,-8588> velocity=<-3,1>
position=<-26049,-17311> velocity=<3,2>
position=<-17314,-34759> velocity=<2,4>
position=<-43491,8862> velocity=<5,-1>
position=<-43464,-43486> velocity=<5,5>
position=<-43503,-17314> velocity=<5,2>
position=<-8615,-17314> velocity=<1,2>
position=<8867,-34762> velocity=<-1,4>
position=<35026,-17314> velocity=<-4,2>
position=<43775,17593> velocity=<-5,-2>
position=<-26064,-43481> velocity=<3,5>
position=<-34763,-26033> velocity=<4,3>
position=<-34778,-26039> velocity=<4,3>
position=<-8595,43767> velocity=<1,-5>
position=<-26017,-26036> velocity=<3,3>
position=<43777,-8590> velocity=<-5,1>
position=<-17314,43766> velocity=<2,-5>
position=<-8583,-43489> velocity=<1,5>
position=<26309,26317> velocity=<-3,-3>
position=<43784,-43486> velocity=<-5,5>
position=<8862,-34758> velocity=<-1,4>
position=<-26049,-34762> velocity=<3,4>
position=<-43457,43760> velocity=<5,-5>
position=<26289,43760> velocity=<-3,-5>
position=<26285,-26032> velocity=<-3,3>
position=<-26047,17589> velocity=<3,-2>
position=<8886,35039> velocity=<-1,-4>
position=<43767,43766> velocity=<-5,-5>
position=<35062,35044> velocity=<-4,-4>
position=<-43499,43765> velocity=<5,-5>
position=<35039,-17306> velocity=<-4,2>
position=<8894,43764> velocity=<-1,-5>
position=<8859,26314> velocity=<-1,-3>
position=<17597,35042> velocity=<-2,-4>
position=<43739,-17310> velocity=<-5,2>
position=<-8564,35035> velocity=<1,-4>
position=<43737,-26031> velocity=<-5,3>
position=<17589,-34765> velocity=<-2,4>
position=<-34774,17594> velocity=<4,-2>
position=<-17295,-8590> velocity=<2,1>
position=<-34758,-8590> velocity=<4,1>
position=<35014,-17307> velocity=<-4,2>
position=<43791,-17310> velocity=<-5,2>
position=<-34734,43769> velocity=<4,-5>
position=<35034,8860> velocity=<-4,-1>
position=<-26060,26316> velocity=<3,-3>
position=<43736,8869> velocity=<-5,-1>
position=<35030,35042> velocity=<-4,-4>
position=<26343,-8586> velocity=<-3,1>
position=<8856,43768> velocity=<-1,-5>
position=<26298,-34765> velocity=<-3,4>
position=<35034,-43489> velocity=<-4,5>
position=<35027,8862> velocity=<-4,-1>
position=<-26015,17589> velocity=<3,-2>
position=<-43491,-43484> velocity=<5,5>
position=<35066,26319> velocity=<-4,-3>
position=<17616,-43489> velocity=<-2,5>
position=<-17316,26316> velocity=<2,-3>
position=<35042,43769> velocity=<-4,-5>
position=<-8599,-26039> velocity=<1,3>
position=<17604,-17306> velocity=<-2,2>
position=<-34786,-8590> velocity=<4,1>
position=<43740,8861> velocity=<-5,-1>
position=<-17337,-43490> velocity=<2,5>
position=<26342,8869> velocity=<-3,-1>
position=<26301,-17312> velocity=<-3,2>
position=<-26013,-26036> velocity=<3,3>
position=<43764,-26040> velocity=<-5,3>
position=<-17282,-34756> velocity=<2,4>
position=<-8613,17594> velocity=<1,-2>
position=<17600,26310> velocity=<-2,-3>
position=<26306,-43481> velocity=<-3,5>
position=<-17335,-34756> velocity=<2,4>
position=<-34758,35039> velocity=<4,-4>
position=<8886,-26031> velocity=<-1,3>
position=<43744,17594> velocity=<-5,-2>
position=<17572,26314> velocity=<-2,-3>
position=<17576,-17313> velocity=<-2,2>
position=<43740,-26035> velocity=<-5,3>
position=<-17319,-43485> velocity=<2,5>
position=<35058,17588> velocity=<-4,-2>
position=<8838,-26040> velocity=<-1,3>
position=<26337,43764> velocity=<-3,-5>
position=<-8562,43769> velocity=<1,-5>
position=<17586,-26037> velocity=<-2,3>
position=<17608,35038> velocity=<-2,-4>
position=<17572,-17308> velocity=<-2,2>
position=<43767,-26038> velocity=<-5,3>
position=<-43483,8861> velocity=<5,-1>
position=<26326,8869> velocity=<-3,-1>
position=<8878,43764> velocity=<-1,-5>
position=<-43472,26314> velocity=<5,-3>
position=<8887,8860> velocity=<-1,-1>
position=<-8556,-26031> velocity=<1,3>
position=<-17300,8868> velocity=<2,-1>
position=<-26028,17586> velocity=<3,-2>
position=<-26033,-34762> velocity=<3,4>
position=<43760,43765> velocity=<-5,-5>
position=<26326,17591> velocity=<-3,-2>
position=<26343,43760> velocity=<-3,-5>
position=<8884,-43486> velocity=<-1,5>
position=<-26064,17585> velocity=<3,-2>
position=<17602,8869> velocity=<-2,-1>
position=<-34742,-43482> velocity=<4,5>
position=<43762,8867> velocity=<-5,-1>
position=<-34745,35037> velocity=<4,-4>
position=<-17312,-43489> velocity=<2,5>
position=<-26060,-43482> velocity=<3,5>
position=<-43499,26313> velocity=<5,-3>
position=<-34766,-34756> velocity=<4,4>
position=<26312,-34763> velocity=<-3,4>
position=<-17298,43765> velocity=<2,-5>
position=<26343,-34756> velocity=<-3,4>
position=<8891,-26033> velocity=<-1,3>
position=<35014,17593> velocity=<-4,-2>
position=<35054,-8581> velocity=<-4,1>
position=<-26060,8868> velocity=<3,-1>
position=<8846,-34756> velocity=<-1,4>
position=<26319,8864> velocity=<-3,-1>
position=<-43504,43769> velocity=<5,-5>
position=<-17313,17587> velocity=<2,-2>
position=<-43466,-26031> velocity=<5,3>
position=<-8615,35038> velocity=<1,-4>
position=<-34787,43769> velocity=<4,-5>
position=<43748,-8590> velocity=<-5,1>
position=<-8613,-43490> velocity=<1,5>
position=<17616,8865> velocity=<-2,-1>
position=<8872,-34763> velocity=<-1,4>
position=<26309,43768> velocity=<-3,-5>
position=<-43480,-26036> velocity=<5,3>
position=<17592,8867> velocity=<-2,-1>
position=<-26021,-8587> velocity=<3,1>
position=<43772,43768> velocity=<-5,-5>
position=<-43459,8860> velocity=<5,-1>
position=<-26062,35044> velocity=<3,-4>
position=<26333,-43490> velocity=<-3,5>
position=<17620,-34756> velocity=<-2,4>
position=<35031,43761> velocity=<-4,-5>
position=<26301,-26040> velocity=<-3,3>
position=<-43459,8862> velocity=<5,-1>
position=<26317,-43481> velocity=<-3,5>
position=<26318,-8590> velocity=<-3,1>
position=<17580,17592> velocity=<-2,-2>
position=<-34733,26314> velocity=<4,-3>
position=<-26060,26311> velocity=<3,-3>
position=<8847,26317> velocity=<-1,-3>
position=<43768,-17306> velocity=<-5,2>
position=<-8567,8866> velocity=<1,-1>
position=<17603,-34756> velocity=<-2,4>
position=<26319,-43490> velocity=<-3,5>
position=<-34734,-34762> velocity=<4,4>
position=<17610,17594> velocity=<-2,-2>
position=<17592,43761> velocity=<-2,-5>
position=<8847,-8590> velocity=<-1,1>
position=<-26033,43765> velocity=<3,-5>
position=<35039,-17315> velocity=<-4,2>
position=<-8581,43769> velocity=<1,-5>
position=<-17328,35038> velocity=<2,-4>
position=<17562,35044> velocity=<-2,-4>
position=<43775,-17306> velocity=<-5,2>
position=<26297,-17315> velocity=<-3,2>
position=<35062,-17306> velocity=<-4,2>
position=<35054,17585> velocity=<-4,-2>
position=<-43459,-34765> velocity=<5,4>
position=<35062,35044> velocity=<-4,-4>
position=<-34786,35040> velocity=<4,-4>
position=<-8580,26310> velocity=<1,-3>
position=<17581,26314> velocity=<-2,-3>
position=<17581,-8589> velocity=<-2,1>
position=<26306,26316> velocity=<-3,-3>
position=<35028,-43487> velocity=<-4,5>
position=<-34762,35036> velocity=<4,-4>
position=<-8567,-34764> velocity=<1,4>
position=<17617,-43490> velocity=<-2,5>
position=<43767,26316> velocity=<-5,-3>
position=<-8589,35041> velocity=<1,-4>
position=<35029,-34760> velocity=<-4,4>
position=<-43495,-43482> velocity=<5,5>
position=<26290,-43485> velocity=<-3,5>
position=<17581,-43483> velocity=<-2,5>
position=<17596,-34761> velocity=<-2,4>
position=<43787,-43486> velocity=<-5,5>
position=<8883,8863> velocity=<-1,-1>
position=<-34758,-17310> velocity=<4,2>
position=<26298,43760> velocity=<-3,-5>
position=<17560,-43487> velocity=<-2,5>
position=<17617,26319> velocity=<-2,-3>
position=<8836,43760> velocity=<-1,-5>
position=<17594,35044> velocity=<-2,-4>
position=<43775,-26031> velocity=<-5,3>
position=<43796,8869> velocity=<-5,-1>
position=<-17281,-17311> velocity=<2,2>
position=<-34753,8868> velocity=<4,-1>
position=<-34740,-34765> velocity=<4,4>
position=<17596,-26040> velocity=<-2,3>
position=<-26057,17592> velocity=<3,-2>
position=<-34774,-17313> velocity=<4,2>
position=<26317,43769> velocity=<-3,-5>
position=<-17324,8864> velocity=<2,-1>
position=<35068,-43481> velocity=<-4,5>
position=<-43467,-26034> velocity=<5,3>
position=<-26049,-17308> velocity=<3,2>
position=<43795,26310> velocity=<-5,-3>
position=<-26032,17589> velocity=<3,-2>
position=<-34753,-34762> velocity=<4,4>
position=<-17299,43760> velocity=<2,-5>
position=<43756,-34763> velocity=<-5,4>
position=<-26060,-17314> velocity=<3,2>
position=<-17316,-43487> velocity=<2,5>
position=<35031,-43487> velocity=<-4,5>
position=<-8614,-34756> velocity=<1,4>
position=<-43467,-8583> velocity=<5,1>
position=<-26006,26310> velocity=<3,-3>
position=<-26041,-43490> velocity=<3,5>
position=<-26017,26315> velocity=<3,-3>
position=<-26053,-17307> velocity=<3,2>
position=<17616,43763> velocity=<-2,-5>
position=<-8587,43768> velocity=<1,-5>
position=<8835,26317> velocity=<-1,-3>
position=<-43495,-43482> velocity=<5,5>
position=<-43515,8862> velocity=<5,-1>
position=<-26041,26317> velocity=<3,-3>
position=<17571,-43481> velocity=<-2,5>
position=<-34730,43764> velocity=<4,-5>
position=<-26009,-17311> velocity=<3,2>
position=<26301,-34763> velocity=<-3,4>
position=<35034,8860> velocity=<-4,-1>
position=<-8578,-34759> velocity=<1,4>
position=<8875,35042> velocity=<-1,-4>
position=<-26046,-8584> velocity=<3,1>
position=<8854,17590> velocity=<-1,-2>
position=<-8570,8862> velocity=<1,-1>
position=<8847,17587> velocity=<-1,-2>
position=<-26039,-17312> velocity=<3,2>
position=<-43467,35044> velocity=<5,-4>
position=<35047,-43484> velocity=<-4,5>
position=<8867,-43486> velocity=<-1,5>
position=<8863,35043> velocity=<-1,-4>
position=<8884,-8581> velocity=<-1,1>
position=<17581,-8586> velocity=<-2,1>
position=<-34750,-34758> velocity=<4,4>
position=<17603,-43481> velocity=<-2,5>
position=<-26006,43769> velocity=<3,-5>
position=<43772,-34760> velocity=<-5,4>
position=<8835,35036> velocity=<-1,-4>
position=<-26060,-26032> velocity=<3,3>
position=<-43473,8869> velocity=<5,-1>
position=<-17295,43769> velocity=<2,-5>
position=<43784,43760> velocity=<-5,-5>
position=<26310,-17311> velocity=<-3,2>
position=<26297,8865> velocity=<-3,-1>
position=<35060,43764> velocity=<-4,-5>
position=<26309,-43483> velocity=<-3,5>
position=<43772,-43487> velocity=<-5,5>
position=<26301,26317> velocity=<-3,-3>
position=<-8615,-8588> velocity=<1,1>
position=<-17331,8869> velocity=<2,-1>
position=<-17332,-17307> velocity=<2,2>
position=<35044,35035> velocity=<-4,-4>
position=<26321,-26036> velocity=<-3,3>
position=<35054,-43487> velocity=<-4,5>
position=<26288,-8590> velocity=<-3,1>
position=<8851,43769> velocity=<-1,-5>
position=<26333,8864> velocity=<-3,-1>
position=<-43467,-17315> velocity=<5,2>
position=<-34757,43764> velocity=<4,-5>
position=<-43475,26318> velocity=<5,-3>
position=<-43459,17585> velocity=<5,-2>
position=<-26065,-26037> velocity=<3,3>
position=<8879,-34756> velocity=<-1,4>
position=<-17340,8864> velocity=<2,-1>
position=<-8562,26310> velocity=<1,-3>
position=<26301,8864> velocity=<-3,-1>
position=<35031,-17314> velocity=<-4,2>
position=<26297,-26032> velocity=<-3,3>
position=<-17316,17590> velocity=<2,-2>
position=<-8572,-34756> velocity=<1,4>
position=<-17328,35037> velocity=<2,-4>
position=<-17340,-8585> velocity=<2,1>
position=<35022,-34759> velocity=<-4,4>
position=<-43474,-17315> velocity=<5,2>
position=<35050,43767> velocity=<-4,-5>
position=<-17337,26315> velocity=<2,-3>
position=<-8581,-17315> velocity=<1,2>
position=<-26048,-8589> velocity=<3,1>
position=<-43481,-43486> velocity=<5,5>
position=<-34734,35042> velocity=<4,-4>
position=<-26020,-8581> velocity=<3,1>
position=<8851,17590> velocity=<-1,-2>
position=<-43473,26315> velocity=<5,-3>
position=<-17280,-17306> velocity=<2,2>
position=<26317,35043> velocity=<-3,-4>
position=<26346,43769> velocity=<-3,-5>
position=<17608,17590> velocity=<-2,-2>
position=<26310,35040> velocity=<-3,-4>
"""

func day10Debug() {
    do {
        var points = try Point.pointArray(from: day10Part1Input)
        //    points.forEach { print($0) }
        //    print(points.count)                     // 360
        //    print(try Point.gridSize(from: points)) // (-53525.0, -53500.0, 107331.0, 107279.0)
        //    print(points.first?.asInputString)      // Demonstrates that the asInputString computed property works correctly, effectively allowing a point to be 'saved' and re-used again later.
        
        var oldSize = try Point.gridSize(from: points)
        
        for i in 0...20_000 {
            points = Point.nextGeneration(from: points)
            let newSize = try Point.gridSize(from: points)
            if newSize.width > oldSize.width || newSize.height > oldSize.height {
                print("Grid has grown. Therefore previous generation was a minimum")
                print("New size: \(newSize)")
                print("Area: \(newSize.width * newSize.height)")
                print("i: \(i)") // 10727 Unknowingly, this is the answer to part 2 of day 10 (178.78 minutes) (2.98 hours) (probably less time than it took to program the solution...)
                points.forEach { print($0.asInputString) } // Allows task to be resumed later
                return
            }
            oldSize = newSize
        }
        
        print("Could not find expansion from minimum")
        print("Latest size: \(oldSize)")
        print("Area: \(oldSize.width * oldSize.height)")
        points.forEach { print($0.asInputString) } // Allows task to be resumed later
    } catch {
        print(error)
    }
}

//day10Debug() // Took 3.6 seconds on work Mac Mini when starting from challenge string (not from 'saved' string)

print("Took: \(Date().timeIntervalSince(before)) seconds")
